
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Algorithm Classification Methode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "models=[]\n",
    "test=[]\n",
    "def saveResult(model, test_acc):\n",
    "    models.append(model)\n",
    "    test.append(test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN\n",
    "### Import of libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mlxtend.plotting import plot_decision_regions\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "%matplotlib inline\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Data Science and ML Pipeline \"OSEMN Pipeline\"\n",
    "* O - Obtaining our data\n",
    "* S - Scrubbing / Cleaning our data\n",
    "* E - Exploring / Visualizing our data will allow us to find patterns and trends\n",
    "* M - Modeling our data will give us our predictive power as a wizard\n",
    "* N - INterpreting our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Loading the dataset\n",
    "diabetes_data = pd.read_csv('diabetes.csv')\n",
    "\n",
    "#Print the first 5 rows of the dataframe.\n",
    "diabetes_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic EDA and statistical analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Pregnancies               768 non-null    int64  \n",
      " 1   Glucose                   768 non-null    int64  \n",
      " 2   BloodPressure             768 non-null    int64  \n",
      " 3   SkinThickness             768 non-null    int64  \n",
      " 4   Insulin                   768 non-null    int64  \n",
      " 5   BMI                       768 non-null    float64\n",
      " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
      " 7   Age                       768 non-null    int64  \n",
      " 8   Outcome                   768 non-null    int64  \n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "## gives information about the data types,columns, null value counts, memory usage etc\n",
    "diabetes_data.info(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>127.250000</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
       "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
       "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
       "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
       "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## basic statistic details about the data \n",
    "#(note only numerical columns would be displayed here unless parameter include=\"all\")\n",
    "diabetes_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Pregnancies</th>\n",
       "      <td>768.0</td>\n",
       "      <td>3.845052</td>\n",
       "      <td>3.369578</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>17.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glucose</th>\n",
       "      <td>768.0</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>0.000</td>\n",
       "      <td>99.00000</td>\n",
       "      <td>117.0000</td>\n",
       "      <td>140.25000</td>\n",
       "      <td>199.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BloodPressure</th>\n",
       "      <td>768.0</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>0.000</td>\n",
       "      <td>62.00000</td>\n",
       "      <td>72.0000</td>\n",
       "      <td>80.00000</td>\n",
       "      <td>122.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SkinThickness</th>\n",
       "      <td>768.0</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>32.00000</td>\n",
       "      <td>99.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Insulin</th>\n",
       "      <td>768.0</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>127.25000</td>\n",
       "      <td>846.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>768.0</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.000</td>\n",
       "      <td>27.30000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>36.60000</td>\n",
       "      <td>67.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <td>768.0</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>0.078</td>\n",
       "      <td>0.24375</td>\n",
       "      <td>0.3725</td>\n",
       "      <td>0.62625</td>\n",
       "      <td>2.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>768.0</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>21.000</td>\n",
       "      <td>24.00000</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>41.00000</td>\n",
       "      <td>81.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <td>768.0</td>\n",
       "      <td>0.348958</td>\n",
       "      <td>0.476951</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          count        mean         std     min       25%  \\\n",
       "Pregnancies               768.0    3.845052    3.369578   0.000   1.00000   \n",
       "Glucose                   768.0  120.894531   31.972618   0.000  99.00000   \n",
       "BloodPressure             768.0   69.105469   19.355807   0.000  62.00000   \n",
       "SkinThickness             768.0   20.536458   15.952218   0.000   0.00000   \n",
       "Insulin                   768.0   79.799479  115.244002   0.000   0.00000   \n",
       "BMI                       768.0   31.992578    7.884160   0.000  27.30000   \n",
       "DiabetesPedigreeFunction  768.0    0.471876    0.331329   0.078   0.24375   \n",
       "Age                       768.0   33.240885   11.760232  21.000  24.00000   \n",
       "Outcome                   768.0    0.348958    0.476951   0.000   0.00000   \n",
       "\n",
       "                               50%        75%     max  \n",
       "Pregnancies                 3.0000    6.00000   17.00  \n",
       "Glucose                   117.0000  140.25000  199.00  \n",
       "BloodPressure              72.0000   80.00000  122.00  \n",
       "SkinThickness              23.0000   32.00000   99.00  \n",
       "Insulin                    30.5000  127.25000  846.00  \n",
       "BMI                        32.0000   36.60000   67.10  \n",
       "DiabetesPedigreeFunction    0.3725    0.62625    2.42  \n",
       "Age                        29.0000   41.00000   81.00  \n",
       "Outcome                     0.0000    1.00000    1.00  "
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diabetes_data.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Question creeping out of this summary\n",
    "\n",
    "On these columns, a value of zero does not make sense and thus indicates missing value.\n",
    "\n",
    "Following columns or variables have an invalid zero value:\n",
    "1. Glucose\n",
    "2. BloodPressure\n",
    "3. SkinThickness\n",
    "4. Insulin\n",
    "5. BMI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pregnancies                   0\n",
      "Glucose                       5\n",
      "BloodPressure                35\n",
      "SkinThickness               227\n",
      "Insulin                     374\n",
      "BMI                          11\n",
      "DiabetesPedigreeFunction      0\n",
      "Age                           0\n",
      "Outcome                       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "diabetes_data_copy = diabetes_data.copy(deep = True)\n",
    "diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\n",
    "\n",
    "## showing the count of Nans\n",
    "print(diabetes_data_copy.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To fill these Nan values the data distribution needs to be understood"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = diabetes_data.hist(figsize = (20,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Aiming to impute nan values for the columns in accordance with their distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "diabetes_data_copy['Glucose'].fillna(diabetes_data_copy['Glucose'].mean(), inplace = True)\n",
    "diabetes_data_copy['BloodPressure'].fillna(diabetes_data_copy['BloodPressure'].mean(), inplace = True)\n",
    "diabetes_data_copy['SkinThickness'].fillna(diabetes_data_copy['SkinThickness'].median(), inplace = True)\n",
    "diabetes_data_copy['Insulin'].fillna(diabetes_data_copy['Insulin'].median(), inplace = True)\n",
    "diabetes_data_copy['BMI'].fillna(diabetes_data_copy['BMI'].median(), inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## data type analysis\n",
    "sns.countplot(y=diabetes_data.dtypes ,data=diabetes_data)\n",
    "plt.xlabel(\"count of each data type\")\n",
    "plt.ylabel(\"data types\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    500\n",
      "1    268\n",
      "Name: Outcome, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## checking the balance of the data by plotting the count of outcomes by their value\n",
    "color_wheel = {1: \"#0392cf\", \n",
    "               2: \"#7bc043\"}\n",
    "colors = diabetes_data[\"Outcome\"].map(lambda x: color_wheel.get(x + 1))\n",
    "print(diabetes_data.Outcome.value_counts())\n",
    "p=diabetes_data.Outcome.value_counts().plot(kind=\"bar\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Note :\n",
    "The above graph shows that the data is biased towards datapoints having outcome value as 0 where it means that diabetes was not present actually. The number of non-diabetics is almost twice the number of diabetic patients"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pair plot for clean data\n",
    "A heat map is a two-dimensional representation of information with the help of colors. Heat maps can help the user visualize simple or complex information.\n",
    "The value of Pearson's Correlation Coefficient can be between -1 to +1. 1 means that they are highly correlated and 0 means no correlation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Heatmap for clean data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\n",
    "p=sns.heatmap(diabetes_data_copy.corr(), annot=True,cmap ='RdYlGn') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Scaling the data \n",
    "data Z is rescaled such that μ = 0 and 𝛔 = 1, and is done through this formula:\n",
    "![](https://cdn-images-1.medium.com/max/800/0*PXGPVYIxyI_IEHP7.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc_X = StandardScaler()\n",
    "X =  pd.DataFrame(sc_X.fit_transform(diabetes_data_copy.drop([\"Outcome\"],axis = 1),),\n",
    "        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
    "       'BMI', 'DiabetesPedigreeFunction', 'Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.639947</td>\n",
       "      <td>0.865108</td>\n",
       "      <td>-0.033518</td>\n",
       "      <td>0.670643</td>\n",
       "      <td>-0.181541</td>\n",
       "      <td>0.166619</td>\n",
       "      <td>0.468492</td>\n",
       "      <td>1.425995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.844885</td>\n",
       "      <td>-1.206162</td>\n",
       "      <td>-0.529859</td>\n",
       "      <td>-0.012301</td>\n",
       "      <td>-0.181541</td>\n",
       "      <td>-0.852200</td>\n",
       "      <td>-0.365061</td>\n",
       "      <td>-0.190672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.233880</td>\n",
       "      <td>2.015813</td>\n",
       "      <td>-0.695306</td>\n",
       "      <td>-0.012301</td>\n",
       "      <td>-0.181541</td>\n",
       "      <td>-1.332500</td>\n",
       "      <td>0.604397</td>\n",
       "      <td>-0.105584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.844885</td>\n",
       "      <td>-1.074652</td>\n",
       "      <td>-0.529859</td>\n",
       "      <td>-0.695245</td>\n",
       "      <td>-0.540642</td>\n",
       "      <td>-0.633881</td>\n",
       "      <td>-0.920763</td>\n",
       "      <td>-1.041549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.141852</td>\n",
       "      <td>0.503458</td>\n",
       "      <td>-2.680669</td>\n",
       "      <td>0.670643</td>\n",
       "      <td>0.316566</td>\n",
       "      <td>1.549303</td>\n",
       "      <td>5.484909</td>\n",
       "      <td>-0.020496</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies   Glucose  BloodPressure  SkinThickness   Insulin       BMI  \\\n",
       "0     0.639947  0.865108      -0.033518       0.670643 -0.181541  0.166619   \n",
       "1    -0.844885 -1.206162      -0.529859      -0.012301 -0.181541 -0.852200   \n",
       "2     1.233880  2.015813      -0.695306      -0.012301 -0.181541 -1.332500   \n",
       "3    -0.844885 -1.074652      -0.529859      -0.695245 -0.540642 -0.633881   \n",
       "4    -1.141852  0.503458      -2.680669       0.670643  0.316566  1.549303   \n",
       "\n",
       "   DiabetesPedigreeFunction       Age  \n",
       "0                  0.468492  1.425995  \n",
       "1                 -0.365061 -0.190672  \n",
       "2                  0.604397 -0.105584  \n",
       "3                 -0.920763 -1.041549  \n",
       "4                  5.484909 -0.020496  "
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X = diabetes_data.drop(\"Outcome\",axis = 1)\n",
    "y = diabetes_data_copy.Outcome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Why Scaling the data for KNN?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is always advisable to bring all the features to the same scale for applying distance based algorithms like KNN.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test Train Split and Cross Validation methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1/3,random_state=42, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_scores = []\n",
    "train_scores = []\n",
    "\n",
    "for i in range(1,15):\n",
    "\n",
    "    knn = KNeighborsClassifier(i)\n",
    "    knn.fit(X_train,y_train)\n",
    "    \n",
    "    train_scores.append(knn.score(X_train,y_train))\n",
    "    test_scores.append(knn.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max train score 100.0 % and k = [1]\n"
     ]
    }
   ],
   "source": [
    "## score that comes from testing on the same datapoints that were used for training\n",
    "max_train_score = max(train_scores)\n",
    "train_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\n",
    "print('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max test score 76.5625 % and k = [11]\n"
     ]
    }
   ],
   "source": [
    "## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\n",
    "max_test_score = max(test_scores)\n",
    "test_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\n",
    "print('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Result Visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,5))\n",
    "p = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\n",
    "p = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best result is captured at k = 11 hence 11 is used for the final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.765625"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Setup a knn classifier with k neighbors\n",
    "knn = KNeighborsClassifier(11)\n",
    "\n",
    "knn.fit(X_train,y_train)\n",
    "knn.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## trying to plot decision boundary "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Performance Analysis : "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Confusion Matrix\n",
    "\n",
    "The confusion matrix is a technique used for summarizing the performance of a classification algorithm i.e. it has binary outputs.\n",
    "![](https://cdn-images-1.medium.com/max/1600/0*-GAP6jhtJvt7Bqiv.png)\n",
    "\n",
    "\n",
    "\n",
    "In the famous cancer example :\n",
    "\n",
    "\n",
    "* Cases in which the doctor predicted YES (they have the disease), and they do have the disease will be termed as TRUE POSITIVES (TP). The doctor has correctly predicted that the patient has the disease.\n",
    "\n",
    "* Cases in which the doctor predicted NO (they do not have the disease), and they don’t have the disease will be termed as TRUE NEGATIVES (TN). The doctor has correctly predicted that the patient does not have the disease.\n",
    "\n",
    "* Cases in which the doctor predicted YES, and they do not have the disease will be termed as FALSE POSITIVES (FP). Also known as “Type I error”.\n",
    "\n",
    "* Cases in which the doctor predicted NO, and they have the disease will be termed as FALSE NEGATIVES (FN). Also known as “Type II error”.\n",
    "\n",
    "![](https://cdn-images-1.medium.com/max/1600/0*9r99oJ2PTRi4gYF_.jpg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>142</td>\n",
       "      <td>25</td>\n",
       "      <td>167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>54</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>177</td>\n",
       "      <td>79</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted    0   1  All\n",
       "True                   \n",
       "0          142  25  167\n",
       "1           35  54   89\n",
       "All        177  79  256"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import confusion_matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "#let us get the predictions using the classifier we had fit above\n",
    "y_pred = knn.predict(X_test)\n",
    "confusion_matrix(y_test,y_pred)\n",
    "pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 12.5, 'Predicted label')"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = knn.predict(X_test)\n",
    "from sklearn import metrics\n",
    "cnf_matrix = metrics.confusion_matrix(y_test, y_pred)\n",
    "p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n",
    "plt.title('Confusion matrix', y=1.1)\n",
    "plt.ylabel('Actual label')\n",
    "plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Classification Report\n",
    "\n",
    "Report which includes Precision, Recall and F1-Score.\n",
    "\n",
    "\n",
    "#### Precision Score\n",
    "        TP – True Positives\n",
    "        FP – False Positives\n",
    "\n",
    "        Precision – Accuracy of positive predictions.\n",
    "        Precision = TP/(TP + FP)\n",
    "        \n",
    "   \n",
    "#### Recall Score\n",
    "        FN – False Negatives\n",
    "\n",
    "        Recall(sensitivity or true positive rate): Fraction of positives that were correctly identified.\n",
    "        Recall = TP/(TP+FN)\n",
    "        \n",
    "#### F1 Score\n",
    "        F1 Score (aka F-Score or F-Measure) – A helpful metric for comparing two classifiers.\n",
    "        F1 Score takes into account precision and the recall. \n",
    "        It is created by finding the the harmonic mean of precision and recall.\n",
    "\n",
    "        F1 = 2 x (precision x recall)/(precision + recall)\n",
    "        \n",
    "        \n",
    "        \n",
    "> > ***Precision*** - Precision is the ratio of correctly predicted positive observations to the total predicted positive observations. \n",
    "> > \n",
    "> > Precision = TP/TP+FP\n",
    "> > \n",
    "> > ***Recall (Sensitivity)*** - Recall is the ratio of correctly predicted positive observations to the all observations in actual class \n",
    "> > \n",
    "> > Recall = TP/TP+FN\n",
    "> > \n",
    "> > ***F1 score*** - F1 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. \n",
    "F1 is usually more useful than accuracy, especially if you have an uneven class distribution.\n",
    "Accuracy works best if false positives and false negatives have similar cost. \n",
    "If the cost of false positives and false negatives are very different, it’s better to look at both Precision and Recall. \n",
    "> > \n",
    "> > F1 Score = 2*(Recall * Precision) / (Recall + Precision)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.85      0.83       167\n",
      "           1       0.68      0.61      0.64        89\n",
      "\n",
      "    accuracy                           0.77       256\n",
      "   macro avg       0.74      0.73      0.73       256\n",
      "weighted avg       0.76      0.77      0.76       256\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#import classification_report\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. ROC - AUC\n",
    "ROC (Receiver Operating Characteristic) Curve tells us about how good the model can distinguish between two things (e.g If a patient has a disease or no)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_proba = knn.predict_proba(X_test)[:,1]\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([0,1],[0,1],'k--')\n",
    "plt.plot(fpr,tpr, label='Knn')\n",
    "plt.xlabel('fpr')\n",
    "plt.ylabel('tpr')\n",
    "plt.title('Knn(n_neighbors=11) ROC curve')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8193500639171096"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Area under ROC curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "roc_auc_score(y_test,y_pred_proba)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyper Parameter optimization\n",
    "Grid search is an approach to hyperparameter tuning that will methodically build and evaluate a model for each combination of algorithm parameters specified in a grid. \n",
    "\n",
    " example: \n",
    "\n",
    "Suppose, a machine learning model X takes hyperparameters a1, a2 and a3. \n",
    "Suppose, you defined the grid as:\n",
    "a1 = [0,1,2,3,4,5]\n",
    "a2 = [10,20,30,40,5,60]\n",
    "a3 = [105,105,110,115,120,125]\n",
    "\n",
    "\n",
    "It will start with the combination of [0,10,105], and it will end with [5,60,125]. It will go through all the intermediate combinations between these two which makes grid search computationally very expensive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Score:0.7721840251252015\n",
      "Best Parameters: {'n_neighbors': 25}\n"
     ]
    }
   ],
   "source": [
    "#import GridSearchCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "#In case of classifier like knn the parameter to be tuned is n_neighbors\n",
    "param_grid = {'n_neighbors':np.arange(1,50)}\n",
    "knn = KNeighborsClassifier()\n",
    "knn_cv= GridSearchCV(knn,param_grid,cv=5)\n",
    "knn_cv.fit(X,y)\n",
    "\n",
    "print(\"Best Score:\" + str(knn_cv.best_score_))\n",
    "print(\"Best Parameters: \" + str(knn_cv.best_params_))\n",
    "\n",
    "saveResult('KNN',knn_cv.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import library\n",
    "import pandas  as pd #Data manipulation\n",
    "import numpy as np #Data manipulation\n",
    "import matplotlib.pyplot as plt # Visualization\n",
    "import seaborn as sns #Visualization\n",
    "plt.rcParams['figure.figsize'] = [8,5]\n",
    "plt.rcParams['font.size'] =14\n",
    "plt.rcParams['font.weight']= 'bold'\n",
    "plt.style.use('seaborn-whitegrid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Number of rows and columns in the data set:  (768, 9)\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import dataset\n",
    "\n",
    "df = pd.read_csv('diabetes.csv')\n",
    "print('\\nNumber of rows and columns in the data set: ',df.shape)\n",
    "print('')\n",
    "\n",
    "#Lets look into top few rows and columns in the dataset\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\"\"\" for our visualization purpose will fit line using seaborn library only for bmi as independent variable \n",
    "and charges as dependent variable\"\"\"\n",
    "\n",
    "sns.lmplot(x='Glucose',y='Outcome',data=df,aspect=2,height=6)\n",
    "plt.xlabel('Glucose: as Independent variable')\n",
    "plt.ylabel('Outcome: as Dependent variable')\n",
    "plt.title('Outcome Vs Glucose');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation plot\n",
    "corr = df.corr()\n",
    "sns.heatmap(corr, cmap = 'Wistia', annot= True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# There is little correlation among valiables (age, glucose, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of peaple diagnosed with Diabetes')"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f= plt.figure(figsize=(12,4))\n",
    "\n",
    "ax=f.add_subplot(121)\n",
    "sns.distplot(df['Outcome'],bins=50,color='r',ax=ax)\n",
    "ax.set_title('Distribution of peaple diagnosed with Diabetes')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(30,6))\n",
    "\n",
    "ax = f.add_subplot(122)\n",
    "sns.violinplot(x='Pregnancies', y='Outcome',data=df,palette='magma',ax=ax)\n",
    "ax.set_title('Violin plot of Outcome vs Pregnancies');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "woman with less then 6 pregnancies are less concerned with diabetes, wich is the opposite with women having more than 6 pregnencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Scatter plot of Outcome vs BMI')"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(14,6))\n",
    "ax = f.add_subplot(121)\n",
    "sns.scatterplot(x='BMI',y='Outcome',data=df,palette='magma',hue='Pregnancies',ax=ax)\n",
    "ax.set_title('Scatter plot of Outcome vs BMI')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Body mass index (BMI) is a measure of body fat based on height and weight that applies to adult men and women. \n",
    " we can see that diabetic woman are those who have higher BMI in general"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dummy variable\n",
    "categorical_columns = ['Pregnancies']\n",
    "df_encode = pd.get_dummies(data = df, prefix = 'OHE', prefix_sep='_',\n",
    "               columns = categorical_columns,\n",
    "               drop_first =True,\n",
    "              dtype='int8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in original data frame:\n",
      " ['Pregnancies' 'Glucose' 'BloodPressure' 'SkinThickness' 'Insulin' 'BMI'\n",
      " 'DiabetesPedigreeFunction' 'Age' 'Outcome']\n",
      "\n",
      "Number of rows and columns in the dataset: (768, 9)\n",
      "\n",
      "Columns in data frame after encoding dummy variable:\n",
      " ['Glucose' 'BloodPressure' 'SkinThickness' 'Insulin' 'BMI'\n",
      " 'DiabetesPedigreeFunction' 'Age' 'Outcome' 'OHE_1' 'OHE_2' 'OHE_3'\n",
      " 'OHE_4' 'OHE_5' 'OHE_6' 'OHE_7' 'OHE_8' 'OHE_9' 'OHE_10' 'OHE_11'\n",
      " 'OHE_12' 'OHE_13' 'OHE_14' 'OHE_15' 'OHE_17']\n",
      "\n",
      "Number of rows and columns in the dataset: (768, 24)\n"
     ]
    }
   ],
   "source": [
    "# Lets verify the dummay variable process\n",
    "print('Columns in original data frame:\\n',df.columns.values)\n",
    "print('\\nNumber of rows and columns in the dataset:',df.shape)\n",
    "print('\\nColumns in data frame after encoding dummy variable:\\n',df_encode.columns.values)\n",
    "print('\\nNumber of rows and columns in the dataset:',df_encode.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2.3887399341670497, 3.160540645970114), 2.77166522354983)"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import boxcox\n",
    "#change 0 values with 2\n",
    "df_encode.replace(0,2,inplace=True)\n",
    "y_bc,lam, ci= boxcox(df_encode['Outcome'],alpha=0.05)\n",
    "## trnsform 0 to positive data\n",
    "ci,lam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train Test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = df_encode.drop('Outcome',axis=1) # Independet variable\n",
    "y = df_encode['Outcome'] # dependent variable\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=23)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model building\n",
    "In this step build model using our linear regression equation  𝜃=(𝐗𝐓𝐗)−1𝐗𝐓𝐲 . In first step we need to add a feature  𝐱0=1  to our original data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1: add x0 =1 to dataset\n",
    "X_train_0 = np.c_[np.ones((X_train.shape[0],1)),X_train]\n",
    "X_test_0 = np.c_[np.ones((X_test.shape[0],1)),X_test]\n",
    "\n",
    "# Step2: build model\n",
    "from numpy.linalg import inv\n",
    "#dfDirty = dfClean+0.00001*np.random.rand(n, 2)\n",
    "#theta = np.matmul(inv( np.matmul(X_train_0.T,X_train_0) ), np.matmul(X_train_0.T,y_train)) \n",
    "# the determinant is null therfor there is no inverse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scikit Learn module\n",
    "from sklearn.linear_model import LinearRegression\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg.fit(X_train,y_train) # Note: x_0 =1 is no need to add, sklearn will take care of it.\n",
    "\n",
    "#Parameter\n",
    "sk_theta = [lin_reg.intercept_]+list(lin_reg.coef_)\n",
    "#parameter_df = parameter_df.join(pd.Series(sk_theta, name='Sklearn_theta'))\n",
    "#parameter_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We succefull build our model using normal equation and verified using sklearn linear regression module. \n",
    "now we will move to prediction and model evaluvation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Mean Square Error(MSE) or J(theta) is:  0.17298375458147075\n",
      "R square obtain for scikit learn library is : 0.24856837119652708\n"
     ]
    }
   ],
   "source": [
    "# sklearn regression module\n",
    "y_pred_sk = lin_reg.predict(X_test)\n",
    "\n",
    "#Evaluvation: MSE\n",
    "from sklearn.metrics import mean_squared_error\n",
    "J_mse_sk = mean_squared_error(y_pred_sk, y_test)\n",
    "\n",
    "# R_square\n",
    "R_square_sk = lin_reg.score(X_test,y_test)\n",
    "print('The Mean Square Error(MSE) or J(theta) is: ',J_mse_sk)\n",
    "print('R square obtain for scikit learn library is :',R_square_sk)\n",
    "\n",
    "saveResult('Linear Regression',R_square_sk)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model returns  𝑅2  value of 25.79%, so it fit our data test very well, but still we can imporve the the performance of by diffirent technique. Please make a note that we have transformer out variable by applying natural log. When we put model into production antilog is applied to the equation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check for Linearity\n",
    "f = plt.figure(figsize=(14,5))\n",
    "ax = f.add_subplot(121)\n",
    "sns.scatterplot(y_test,y_pred_sk,ax=ax,color='r')\n",
    "ax.set_title('Check for Linearity:\\n Actual Vs Predicted value')\n",
    "\n",
    "# Check for Residual normality & mean\n",
    "ax = f.add_subplot(122)\n",
    "sns.distplot((y_test - y_pred_sk),ax=ax,color='b')\n",
    "ax.axvline((y_test - y_pred_sk).mean(),color='k',linestyle='--')\n",
    "ax.set_title('Check for Residual normality & mean: \\n Residual eror');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check for Multivariate Normality\n",
    "# Quantile-Quantile plot \n",
    "f,ax = plt.subplots(1,2,figsize=(14,6))\n",
    "import scipy as sp\n",
    "_,(_,_,r)= sp.stats.probplot((y_test - y_pred_sk),fit=True,plot=ax[0])\n",
    "ax[0].set_title('Check for Multivariate Normality: \\nQ-Q Plot')\n",
    "\n",
    "#Check for Homoscedasticity\n",
    "sns.scatterplot(y = (y_test - y_pred_sk), x= y_pred_sk, ax = ax[1],color='r') \n",
    "ax[1].set_title('Check for Homoscedasticity: \\nResidual Vs Predicted');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model assumption linear regression as follows\n",
    "1. In our model  the actual vs predicted plot is curve so linear assumption fails\n",
    "2. The residual mean is zero and residual error plot right skewed\n",
    "3. Q-Q plot shows as value log value greater than 1.5 trends to increase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ID3 AND C4.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import tree\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "import graphviz\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.Prepare train/test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"diabetes.csv\")\n",
    "df = df.drop('SkinThickness', 'columns')\n",
    "df = df.dropna()\n",
    "\n",
    "df = df[(df[['Glucose','BloodPressure','Insulin', 'BMI','DiabetesPedigreeFunction','Age']] != 0).all(axis=1)]\n",
    "\n",
    "split_data = train_test_split(df, test_size=.30)\n",
    "\n",
    "train_data = split_data[0]\n",
    "test_data = split_data[1]\n",
    "\n",
    "outcome_train = train_data.Outcome.tolist()\n",
    "outcome_test = test_data.Outcome.tolist()\n",
    "\n",
    "train_data_remove = train_data.drop(columns = \"Outcome\")\n",
    "test_data_remove = test_data.drop(columns = \"Outcome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.ID3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.49.3 (20211023.0002)\n",
       " -->\n",
       "<!-- Title: Tree Pages: 1 -->\n",
       "<svg width=\"1796pt\" height=\"1309pt\"\n",
       " viewBox=\"0.00 0.00 1795.50 1309.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 1305)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-1305 1791.5,-1305 1791.5,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"875,-1301 753,-1301 753,-1233 875,-1233 875,-1301\"/>\n",
       "<text text-anchor=\"middle\" x=\"814\" y=\"-1285.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 127.5</text>\n",
       "<text text-anchor=\"middle\" x=\"814\" y=\"-1270.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.889</text>\n",
       "<text text-anchor=\"middle\" x=\"814\" y=\"-1255.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 274</text>\n",
       "<text text-anchor=\"middle\" x=\"814\" y=\"-1240.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [190, 84]</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"572,-1197 450,-1197 450,-1129 572,-1129 572,-1197\"/>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1181.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.505</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1166.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.525</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1151.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 169</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1136.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [149, 20]</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M752.68,-1245.36C703.3,-1228.73 633.81,-1205.34 582.01,-1187.9\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"582.82,-1184.48 572.23,-1184.61 580.59,-1191.12 582.82,-1184.48\"/>\n",
       "<text text-anchor=\"middle\" x=\"583.34\" y=\"-1203.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n",
       "</g>\n",
       "<!-- 32 -->\n",
       "<g id=\"node33\" class=\"node\">\n",
       "<title>32</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1248,-1197 1132,-1197 1132,-1129 1248,-1129 1248,-1197\"/>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1181.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 165.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1166.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.965</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1151.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 105</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1136.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [41, 64]</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;32 -->\n",
       "<g id=\"edge32\" class=\"edge\">\n",
       "<title>0&#45;&gt;32</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M875.25,-1249.38C943.02,-1231 1051.93,-1201.46 1122.22,-1182.39\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1123.14,-1185.77 1131.87,-1179.77 1121.3,-1179.01 1123.14,-1185.77\"/>\n",
       "<text text-anchor=\"middle\" x=\"1119.44\" y=\"-1197.76\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"410,-1093 294,-1093 294,-1025 410,-1025 410,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 81.0</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.237</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 103</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [99, 4]</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M459.38,-1128.88C444.3,-1119.21 427.7,-1108.56 412.15,-1098.59\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"413.94,-1095.58 403.64,-1093.12 410.16,-1101.47 413.94,-1095.58\"/>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"569,-1093 453,-1093 453,-1025 569,-1025 569,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 61.0</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.799</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 66</text>\n",
       "<text text-anchor=\"middle\" x=\"511\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [50, 16]</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;9 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>1&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M511,-1128.88C511,-1120.78 511,-1111.98 511,-1103.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"514.5,-1103.3 511,-1093.3 507.5,-1103.3 514.5,-1103.3\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"275.5,-981.5 170.5,-981.5 170.5,-928.5 275.5,-928.5 275.5,-981.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"223\" y=\"-966.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"223\" y=\"-951.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 88</text>\n",
       "<text text-anchor=\"middle\" x=\"223\" y=\"-936.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [88, 0]</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M310.12,-1024.88C295.1,-1013.01 278.2,-999.65 263.31,-987.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"265.29,-984.98 255.28,-981.52 260.95,-990.47 265.29,-984.98\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"410,-989 294,-989 294,-921 410,-921 410,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[0] &lt;= 1.5</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.837</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [11, 4]</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M352,-1024.88C352,-1016.78 352,-1007.98 352,-999.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"355.5,-999.3 352,-989.3 348.5,-999.3 355.5,-999.3\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>5</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"226,-885 110,-885 110,-817 226,-817 226,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 23.5</text>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.918</text>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 4]</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;5 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>4&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M293.78,-921.73C275.15,-911.4 254.37,-899.88 235.15,-889.23\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"236.6,-886.03 226.16,-884.24 233.2,-892.15 236.6,-886.03\"/>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"402,-877.5 302,-877.5 302,-824.5 402,-824.5 402,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n",
       "<text text-anchor=\"middle\" x=\"352\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 0]</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;8 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>4&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M352,-920.88C352,-910.33 352,-898.6 352,-887.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"355.5,-887.52 352,-877.52 348.5,-887.52 355.5,-887.52\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>6</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"100,-773.5 0,-773.5 0,-720.5 100,-720.5 100,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"50\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"50\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"50\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;6 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>5&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M129.69,-816.88C116.08,-805.12 100.78,-791.89 87.25,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"89.38,-777.41 79.52,-773.52 84.8,-782.71 89.38,-777.41\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>7</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"218,-773.5 118,-773.5 118,-720.5 218,-720.5 218,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"168\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 4]</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;7 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>5&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M168,-816.88C168,-806.33 168,-794.6 168,-783.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"171.5,-783.52 168,-773.52 164.5,-783.52 171.5,-783.52\"/>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>10</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"548.5,-981.5 443.5,-981.5 443.5,-928.5 548.5,-928.5 548.5,-981.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"496\" y=\"-966.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"496\" y=\"-951.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n",
       "<text text-anchor=\"middle\" x=\"496\" y=\"-936.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [16, 0]</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;10 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>9&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M506.13,-1024.88C504.56,-1014.22 502.82,-1002.35 501.22,-991.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"504.67,-990.9 499.75,-981.52 497.75,-991.92 504.67,-990.9\"/>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>11</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"683,-989 567,-989 567,-921 683,-921 683,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"625\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 88.0</text>\n",
       "<text text-anchor=\"middle\" x=\"625\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.904</text>\n",
       "<text text-anchor=\"middle\" x=\"625\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 50</text>\n",
       "<text text-anchor=\"middle\" x=\"625\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [34, 16]</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;11 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>9&#45;&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M548.01,-1024.88C558.27,-1015.71 569.51,-1005.65 580.16,-996.12\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"582.66,-998.58 587.78,-989.3 578,-993.36 582.66,-998.58\"/>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>12</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"537,-885 421,-885 421,-817 537,-817 537,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 102.0</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.619</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 26</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [22, 4]</text>\n",
       "</g>\n",
       "<!-- 11&#45;&gt;12 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>11&#45;&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M577.6,-920.88C564.08,-911.44 549.23,-901.06 535.24,-891.29\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"536.87,-888.16 526.66,-885.3 532.86,-893.9 536.87,-888.16\"/>\n",
       "</g>\n",
       "<!-- 19 -->\n",
       "<g id=\"node20\" class=\"node\">\n",
       "<title>19</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"731.5,-885 618.5,-885 618.5,-817 731.5,-817 731.5,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 29.0</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 24</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [12, 12]</text>\n",
       "</g>\n",
       "<!-- 11&#45;&gt;19 -->\n",
       "<g id=\"edge19\" class=\"edge\">\n",
       "<title>11&#45;&gt;19</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M641.23,-920.88C645.38,-912.42 649.9,-903.21 654.24,-894.35\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"657.42,-895.82 658.68,-885.3 651.13,-892.74 657.42,-895.82\"/>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>13</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"352,-781 236,-781 236,-713 352,-713 352,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"294\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 1.28</text>\n",
       "<text text-anchor=\"middle\" x=\"294\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.276</text>\n",
       "<text text-anchor=\"middle\" x=\"294\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 21</text>\n",
       "<text text-anchor=\"middle\" x=\"294\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [20, 1]</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;13 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>12&#45;&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M420.97,-818.01C401.95,-807.52 380.66,-795.78 361.03,-784.96\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"362.59,-781.82 352.14,-780.06 359.21,-787.95 362.59,-781.82\"/>\n",
       "</g>\n",
       "<!-- 16 -->\n",
       "<g id=\"node17\" class=\"node\">\n",
       "<title>16</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"537,-781 421,-781 421,-713 537,-713 537,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 68.0</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.971</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"479\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 3]</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;16 -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>12&#45;&gt;16</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M479,-816.88C479,-808.78 479,-799.98 479,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"482.5,-791.3 479,-781.3 475.5,-791.3 482.5,-791.3\"/>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>14</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"199.5,-669.5 94.5,-669.5 94.5,-616.5 199.5,-616.5 199.5,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"147\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"147\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\n",
       "<text text-anchor=\"middle\" x=\"147\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [20, 0]</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;14 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>13&#45;&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M246.27,-712.88C228.84,-700.79 209.19,-687.15 192,-675.22\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"193.99,-672.35 183.78,-669.52 190,-678.1 193.99,-672.35\"/>\n",
       "</g>\n",
       "<!-- 15 -->\n",
       "<g id=\"node16\" class=\"node\">\n",
       "<title>15</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"318,-669.5 218,-669.5 218,-616.5 318,-616.5 318,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"268\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"268\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"268\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;15 -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>13&#45;&gt;15</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M285.56,-712.88C282.84,-702.22 279.82,-690.35 277.05,-679.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"280.37,-678.35 274.51,-669.52 273.58,-680.07 280.37,-678.35\"/>\n",
       "</g>\n",
       "<!-- 17 -->\n",
       "<g id=\"node18\" class=\"node\">\n",
       "<title>17</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"436,-669.5 336,-669.5 336,-616.5 436,-616.5 436,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"386\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"386\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"386\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;17 -->\n",
       "<g id=\"edge17\" class=\"edge\">\n",
       "<title>16&#45;&gt;17</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M448.81,-712.88C438.38,-701.45 426.7,-688.63 416.26,-677.19\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"418.59,-674.55 409.27,-669.52 413.42,-679.27 418.59,-674.55\"/>\n",
       "</g>\n",
       "<!-- 18 -->\n",
       "<g id=\"node19\" class=\"node\">\n",
       "<title>18</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"554,-669.5 454,-669.5 454,-616.5 554,-616.5 554,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"504\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"504\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"504\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;18 -->\n",
       "<g id=\"edge18\" class=\"edge\">\n",
       "<title>16&#45;&gt;18</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M487.12,-712.88C489.73,-702.22 492.64,-690.35 495.29,-679.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"498.76,-680.07 497.75,-669.52 491.97,-678.4 498.76,-680.07\"/>\n",
       "</g>\n",
       "<!-- 20 -->\n",
       "<g id=\"node21\" class=\"node\">\n",
       "<title>20</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"733,-781 617,-781 617,-713 733,-713 733,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 67.0</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.684</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n",
       "<text text-anchor=\"middle\" x=\"675\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 2]</text>\n",
       "</g>\n",
       "<!-- 19&#45;&gt;20 -->\n",
       "<g id=\"edge20\" class=\"edge\">\n",
       "<title>19&#45;&gt;20</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M675,-816.88C675,-808.78 675,-799.98 675,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"678.5,-791.3 675,-781.3 671.5,-791.3 678.5,-791.3\"/>\n",
       "</g>\n",
       "<!-- 25 -->\n",
       "<g id=\"node26\" class=\"node\">\n",
       "<title>25</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"932,-781 816,-781 816,-713 932,-713 932,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.727</text>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.779</text>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 13</text>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 10]</text>\n",
       "</g>\n",
       "<!-- 19&#45;&gt;25 -->\n",
       "<g id=\"edge25\" class=\"edge\">\n",
       "<title>19&#45;&gt;25</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M731.76,-820.91C755.09,-808.95 782.28,-795.01 806.61,-782.54\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"808.48,-785.52 815.78,-777.84 805.29,-779.29 808.48,-785.52\"/>\n",
       "</g>\n",
       "<!-- 21 -->\n",
       "<g id=\"node22\" class=\"node\">\n",
       "<title>21</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"688,-677 572,-677 572,-609 688,-609 688,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"630\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 63.0</text>\n",
       "<text text-anchor=\"middle\" x=\"630\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.918</text>\n",
       "<text text-anchor=\"middle\" x=\"630\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"630\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 2]</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;21 -->\n",
       "<g id=\"edge21\" class=\"edge\">\n",
       "<title>20&#45;&gt;21</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M660.39,-712.88C656.7,-704.51 652.68,-695.4 648.81,-686.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"651.93,-685.04 644.69,-677.3 645.53,-687.86 651.93,-685.04\"/>\n",
       "</g>\n",
       "<!-- 24 -->\n",
       "<g id=\"node25\" class=\"node\">\n",
       "<title>24</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"806,-669.5 706,-669.5 706,-616.5 806,-616.5 806,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"756\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"756\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n",
       "<text text-anchor=\"middle\" x=\"756\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 0]</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;24 -->\n",
       "<g id=\"edge24\" class=\"edge\">\n",
       "<title>20&#45;&gt;24</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M701.3,-712.88C710.29,-701.56 720.36,-688.88 729.38,-677.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"732.26,-679.53 735.73,-669.52 726.77,-675.17 732.26,-679.53\"/>\n",
       "</g>\n",
       "<!-- 22 -->\n",
       "<g id=\"node23\" class=\"node\">\n",
       "<title>22</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"621,-565.5 521,-565.5 521,-512.5 621,-512.5 621,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"571\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"571\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"571\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;22 -->\n",
       "<g id=\"edge22\" class=\"edge\">\n",
       "<title>21&#45;&gt;22</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M610.84,-608.88C604.42,-597.78 597.24,-585.37 590.77,-574.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"593.8,-572.42 585.76,-565.52 587.74,-575.93 593.8,-572.42\"/>\n",
       "</g>\n",
       "<!-- 23 -->\n",
       "<g id=\"node24\" class=\"node\">\n",
       "<title>23</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"739,-565.5 639,-565.5 639,-512.5 739,-512.5 739,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"689\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"689\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"689\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;23 -->\n",
       "<g id=\"edge23\" class=\"edge\">\n",
       "<title>21&#45;&gt;23</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M649.16,-608.88C655.58,-597.78 662.76,-585.37 669.23,-574.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"672.26,-575.93 674.24,-565.52 666.2,-572.42 672.26,-575.93\"/>\n",
       "</g>\n",
       "<!-- 26 -->\n",
       "<g id=\"node27\" class=\"node\">\n",
       "<title>26</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"924,-669.5 824,-669.5 824,-616.5 924,-616.5 924,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"874\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 6]</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;26 -->\n",
       "<g id=\"edge26\" class=\"edge\">\n",
       "<title>25&#45;&gt;26</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M874,-712.88C874,-702.33 874,-690.6 874,-679.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"877.5,-679.52 874,-669.52 870.5,-679.52 877.5,-679.52\"/>\n",
       "</g>\n",
       "<!-- 27 -->\n",
       "<g id=\"node28\" class=\"node\">\n",
       "<title>27</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1058,-677 942,-677 942,-609 1058,-609 1058,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1000\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 43.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1000\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.985</text>\n",
       "<text text-anchor=\"middle\" x=\"1000\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7</text>\n",
       "<text text-anchor=\"middle\" x=\"1000\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 4]</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;27 -->\n",
       "<g id=\"edge27\" class=\"edge\">\n",
       "<title>25&#45;&gt;27</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M914.91,-712.88C926.35,-703.62 938.91,-693.45 950.78,-683.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"953.3,-686.31 958.87,-677.3 948.89,-680.87 953.3,-686.31\"/>\n",
       "</g>\n",
       "<!-- 28 -->\n",
       "<g id=\"node29\" class=\"node\">\n",
       "<title>28</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"936,-573 820,-573 820,-505 936,-505 936,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"878\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 33.0</text>\n",
       "<text text-anchor=\"middle\" x=\"878\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.811</text>\n",
       "<text text-anchor=\"middle\" x=\"878\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"878\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 1]</text>\n",
       "</g>\n",
       "<!-- 27&#45;&gt;28 -->\n",
       "<g id=\"edge28\" class=\"edge\">\n",
       "<title>27&#45;&gt;28</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M960.39,-608.88C949.31,-599.62 937.15,-589.45 925.66,-579.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"927.75,-577.03 917.83,-573.3 923.26,-582.4 927.75,-577.03\"/>\n",
       "</g>\n",
       "<!-- 31 -->\n",
       "<g id=\"node32\" class=\"node\">\n",
       "<title>31</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1054,-565.5 954,-565.5 954,-512.5 1054,-512.5 1054,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 27&#45;&gt;31 -->\n",
       "<g id=\"edge31\" class=\"edge\">\n",
       "<title>27&#45;&gt;31</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1001.3,-608.88C1001.72,-598.22 1002.18,-586.35 1002.61,-575.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1006.1,-575.65 1003,-565.52 999.11,-575.38 1006.1,-575.65\"/>\n",
       "</g>\n",
       "<!-- 29 -->\n",
       "<g id=\"node30\" class=\"node\">\n",
       "<title>29</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"869,-461.5 769,-461.5 769,-408.5 869,-408.5 869,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"819\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"819\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"819\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;29 -->\n",
       "<g id=\"edge29\" class=\"edge\">\n",
       "<title>28&#45;&gt;29</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M858.84,-504.88C852.42,-493.78 845.24,-481.37 838.77,-470.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"841.8,-468.42 833.76,-461.52 835.74,-471.93 841.8,-468.42\"/>\n",
       "</g>\n",
       "<!-- 30 -->\n",
       "<g id=\"node31\" class=\"node\">\n",
       "<title>30</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"987,-461.5 887,-461.5 887,-408.5 987,-408.5 987,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"937\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"937\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"937\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;30 -->\n",
       "<g id=\"edge30\" class=\"edge\">\n",
       "<title>28&#45;&gt;30</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M897.16,-504.88C903.58,-493.78 910.76,-481.37 917.23,-470.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"920.26,-471.93 922.24,-461.52 914.2,-468.42 920.26,-471.93\"/>\n",
       "</g>\n",
       "<!-- 33 -->\n",
       "<g id=\"node34\" class=\"node\">\n",
       "<title>33</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1246.5,-1093 1133.5,-1093 1133.5,-1025 1246.5,-1025 1246.5,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 23.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 76</text>\n",
       "<text text-anchor=\"middle\" x=\"1190\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [39, 37]</text>\n",
       "</g>\n",
       "<!-- 32&#45;&gt;33 -->\n",
       "<g id=\"edge33\" class=\"edge\">\n",
       "<title>32&#45;&gt;33</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1190,-1128.88C1190,-1120.78 1190,-1111.98 1190,-1103.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1193.5,-1103.3 1190,-1093.3 1186.5,-1103.3 1193.5,-1103.3\"/>\n",
       "</g>\n",
       "<!-- 68 -->\n",
       "<g id=\"node69\" class=\"node\">\n",
       "<title>68</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1569,-1093 1453,-1093 1453,-1025 1569,-1025 1569,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 66.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.362</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 29</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 27]</text>\n",
       "</g>\n",
       "<!-- 32&#45;&gt;68 -->\n",
       "<g id=\"edge68\" class=\"edge\">\n",
       "<title>32&#45;&gt;68</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1248.13,-1143.53C1302.95,-1126.11 1385.13,-1100 1442.97,-1081.62\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1444.29,-1084.87 1452.76,-1078.51 1442.17,-1078.2 1444.29,-1084.87\"/>\n",
       "</g>\n",
       "<!-- 34 -->\n",
       "<g id=\"node35\" class=\"node\">\n",
       "<title>34</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1181,-989 1065,-989 1065,-921 1181,-921 1181,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1123\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 61.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1123\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.371</text>\n",
       "<text text-anchor=\"middle\" x=\"1123\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1123\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [13, 1]</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;34 -->\n",
       "<g id=\"edge34\" class=\"edge\">\n",
       "<title>33&#45;&gt;34</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1168.25,-1024.88C1162.57,-1016.24 1156.38,-1006.82 1150.45,-997.79\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1153.29,-995.74 1144.87,-989.3 1147.44,-999.58 1153.29,-995.74\"/>\n",
       "</g>\n",
       "<!-- 39 -->\n",
       "<g id=\"node40\" class=\"node\">\n",
       "<title>39</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1315,-989 1199,-989 1199,-921 1315,-921 1315,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1257\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 59.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1257\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.981</text>\n",
       "<text text-anchor=\"middle\" x=\"1257\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 62</text>\n",
       "<text text-anchor=\"middle\" x=\"1257\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [26, 36]</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;39 -->\n",
       "<g id=\"edge39\" class=\"edge\">\n",
       "<title>33&#45;&gt;39</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1211.75,-1024.88C1217.43,-1016.24 1223.62,-1006.82 1229.55,-997.79\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1232.56,-999.58 1235.13,-989.3 1226.71,-995.74 1232.56,-999.58\"/>\n",
       "</g>\n",
       "<!-- 35 -->\n",
       "<g id=\"node36\" class=\"node\">\n",
       "<title>35</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1054,-885 954,-885 954,-817 1054,-817 1054,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 59.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "</g>\n",
       "<!-- 34&#45;&gt;35 -->\n",
       "<g id=\"edge35\" class=\"edge\">\n",
       "<title>34&#45;&gt;35</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1084.36,-920.88C1073.56,-911.62 1061.7,-901.45 1050.49,-891.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1052.72,-889.15 1042.85,-885.3 1048.16,-894.46 1052.72,-889.15\"/>\n",
       "</g>\n",
       "<!-- 38 -->\n",
       "<g id=\"node39\" class=\"node\">\n",
       "<title>38</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1177.5,-877.5 1072.5,-877.5 1072.5,-824.5 1177.5,-824.5 1177.5,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1125\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1125\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 12</text>\n",
       "<text text-anchor=\"middle\" x=\"1125\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [12, 0]</text>\n",
       "</g>\n",
       "<!-- 34&#45;&gt;38 -->\n",
       "<g id=\"edge38\" class=\"edge\">\n",
       "<title>34&#45;&gt;38</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1123.65,-920.88C1123.86,-910.22 1124.09,-898.35 1124.3,-887.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1127.8,-887.59 1124.5,-877.52 1120.8,-887.45 1127.8,-887.59\"/>\n",
       "</g>\n",
       "<!-- 36 -->\n",
       "<g id=\"node37\" class=\"node\">\n",
       "<title>36</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1054,-773.5 954,-773.5 954,-720.5 1054,-720.5 1054,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1004\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 35&#45;&gt;36 -->\n",
       "<g id=\"edge36\" class=\"edge\">\n",
       "<title>35&#45;&gt;36</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1004,-816.88C1004,-806.33 1004,-794.6 1004,-783.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1007.5,-783.52 1004,-773.52 1000.5,-783.52 1007.5,-783.52\"/>\n",
       "</g>\n",
       "<!-- 37 -->\n",
       "<g id=\"node38\" class=\"node\">\n",
       "<title>37</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1172,-773.5 1072,-773.5 1072,-720.5 1172,-720.5 1172,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1122\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1122\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1122\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 35&#45;&gt;37 -->\n",
       "<g id=\"edge37\" class=\"edge\">\n",
       "<title>35&#45;&gt;37</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1042.31,-816.88C1055.92,-805.12 1071.22,-791.89 1084.75,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1087.2,-782.71 1092.48,-773.52 1082.62,-777.41 1087.2,-782.71\"/>\n",
       "</g>\n",
       "<!-- 40 -->\n",
       "<g id=\"node41\" class=\"node\">\n",
       "<title>40</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1313,-885 1197,-885 1197,-817 1313,-817 1313,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1255\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 40.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1255\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.965</text>\n",
       "<text text-anchor=\"middle\" x=\"1255\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 59</text>\n",
       "<text text-anchor=\"middle\" x=\"1255\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [23, 36]</text>\n",
       "</g>\n",
       "<!-- 39&#45;&gt;40 -->\n",
       "<g id=\"edge40\" class=\"edge\">\n",
       "<title>39&#45;&gt;40</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1256.35,-920.88C1256.19,-912.78 1256.02,-903.98 1255.85,-895.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1259.35,-895.23 1255.65,-885.3 1252.35,-895.37 1259.35,-895.23\"/>\n",
       "</g>\n",
       "<!-- 67 -->\n",
       "<g id=\"node68\" class=\"node\">\n",
       "<title>67</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1431,-877.5 1331,-877.5 1331,-824.5 1431,-824.5 1431,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1381\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1381\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1381\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "</g>\n",
       "<!-- 39&#45;&gt;67 -->\n",
       "<g id=\"edge67\" class=\"edge\">\n",
       "<title>39&#45;&gt;67</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1297.26,-920.88C1311.7,-909.01 1327.94,-895.65 1342.25,-883.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1344.48,-886.58 1349.98,-877.52 1340.03,-881.17 1344.48,-886.58\"/>\n",
       "</g>\n",
       "<!-- 41 -->\n",
       "<g id=\"node42\" class=\"node\">\n",
       "<title>41</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1308.5,-781 1195.5,-781 1195.5,-713 1308.5,-713 1308.5,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 110.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 40</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [20, 20]</text>\n",
       "</g>\n",
       "<!-- 40&#45;&gt;41 -->\n",
       "<g id=\"edge41\" class=\"edge\">\n",
       "<title>40&#45;&gt;41</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1254.03,-816.88C1253.79,-808.78 1253.53,-799.98 1253.28,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1256.77,-791.19 1252.98,-781.3 1249.77,-791.4 1256.77,-791.19\"/>\n",
       "</g>\n",
       "<!-- 58 -->\n",
       "<g id=\"node59\" class=\"node\">\n",
       "<title>58</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1443,-781 1327,-781 1327,-713 1443,-713 1443,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"1385\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 105.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1385\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.629</text>\n",
       "<text text-anchor=\"middle\" x=\"1385\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 19</text>\n",
       "<text text-anchor=\"middle\" x=\"1385\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 16]</text>\n",
       "</g>\n",
       "<!-- 40&#45;&gt;58 -->\n",
       "<g id=\"edge58\" class=\"edge\">\n",
       "<title>40&#45;&gt;58</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1297.21,-816.88C1309.13,-807.53 1322.22,-797.26 1334.57,-787.57\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1336.85,-790.23 1342.56,-781.3 1332.53,-784.72 1336.85,-790.23\"/>\n",
       "</g>\n",
       "<!-- 42 -->\n",
       "<g id=\"node43\" class=\"node\">\n",
       "<title>42</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1176,-669.5 1076,-669.5 1076,-616.5 1176,-616.5 1176,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 5]</text>\n",
       "</g>\n",
       "<!-- 41&#45;&gt;42 -->\n",
       "<g id=\"edge42\" class=\"edge\">\n",
       "<title>41&#45;&gt;42</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1211.09,-712.88C1196.42,-701.01 1179.92,-687.65 1165.38,-675.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1167.5,-673.09 1157.52,-669.52 1163.09,-678.53 1167.5,-673.09\"/>\n",
       "</g>\n",
       "<!-- 43 -->\n",
       "<g id=\"node44\" class=\"node\">\n",
       "<title>43</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1310,-677 1194,-677 1194,-609 1310,-609 1310,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 30.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.985</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 35</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [20, 15]</text>\n",
       "</g>\n",
       "<!-- 41&#45;&gt;43 -->\n",
       "<g id=\"edge43\" class=\"edge\">\n",
       "<title>41&#45;&gt;43</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1252,-712.88C1252,-704.78 1252,-695.98 1252,-687.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1255.5,-687.3 1252,-677.3 1248.5,-687.3 1255.5,-687.3\"/>\n",
       "</g>\n",
       "<!-- 44 -->\n",
       "<g id=\"node45\" class=\"node\">\n",
       "<title>44</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1176,-565.5 1076,-565.5 1076,-512.5 1176,-512.5 1176,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1126\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [6, 0]</text>\n",
       "</g>\n",
       "<!-- 43&#45;&gt;44 -->\n",
       "<g id=\"edge44\" class=\"edge\">\n",
       "<title>43&#45;&gt;44</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1211.09,-608.88C1196.42,-597.01 1179.92,-583.65 1165.38,-571.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1167.5,-569.09 1157.52,-565.52 1163.09,-574.53 1167.5,-569.09\"/>\n",
       "</g>\n",
       "<!-- 45 -->\n",
       "<g id=\"node46\" class=\"node\">\n",
       "<title>45</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1310,-573 1194,-573 1194,-505 1310,-505 1310,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 61.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.999</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 29</text>\n",
       "<text text-anchor=\"middle\" x=\"1252\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [14, 15]</text>\n",
       "</g>\n",
       "<!-- 43&#45;&gt;45 -->\n",
       "<g id=\"edge45\" class=\"edge\">\n",
       "<title>43&#45;&gt;45</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1252,-608.88C1252,-600.78 1252,-591.98 1252,-583.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1255.5,-583.3 1252,-573.3 1248.5,-583.3 1255.5,-583.3\"/>\n",
       "</g>\n",
       "<!-- 46 -->\n",
       "<g id=\"node47\" class=\"node\">\n",
       "<title>46</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1235,-461.5 1135,-461.5 1135,-408.5 1235,-408.5 1235,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1185\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1185\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1185\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 6]</text>\n",
       "</g>\n",
       "<!-- 45&#45;&gt;46 -->\n",
       "<g id=\"edge46\" class=\"edge\">\n",
       "<title>45&#45;&gt;46</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1230.25,-504.88C1222.95,-493.78 1214.8,-481.37 1207.45,-470.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1210.18,-467.96 1201.76,-461.52 1204.33,-471.8 1210.18,-467.96\"/>\n",
       "</g>\n",
       "<!-- 47 -->\n",
       "<g id=\"node48\" class=\"node\">\n",
       "<title>47</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1369,-469 1253,-469 1253,-401 1369,-401 1369,-469\"/>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.302</text>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.966</text>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 23</text>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [14, 9]</text>\n",
       "</g>\n",
       "<!-- 45&#45;&gt;47 -->\n",
       "<g id=\"edge47\" class=\"edge\">\n",
       "<title>45&#45;&gt;47</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1271.16,-504.88C1276.1,-496.33 1281.49,-487.01 1286.66,-478.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1289.76,-479.71 1291.74,-469.3 1283.7,-476.2 1289.76,-479.71\"/>\n",
       "</g>\n",
       "<!-- 48 -->\n",
       "<g id=\"node49\" class=\"node\">\n",
       "<title>48</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1298,-357.5 1198,-357.5 1198,-304.5 1298,-304.5 1298,-357.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1248\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1248\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1248\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [6, 0]</text>\n",
       "</g>\n",
       "<!-- 47&#45;&gt;48 -->\n",
       "<g id=\"edge48\" class=\"edge\">\n",
       "<title>47&#45;&gt;48</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1290.55,-400.88C1283.68,-389.78 1276.02,-377.37 1269.11,-366.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1272,-364.19 1263.76,-357.52 1266.04,-367.87 1272,-364.19\"/>\n",
       "</g>\n",
       "<!-- 49 -->\n",
       "<g id=\"node50\" class=\"node\">\n",
       "<title>49</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1432,-365 1316,-365 1316,-297 1432,-297 1432,-365\"/>\n",
       "<text text-anchor=\"middle\" x=\"1374\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 143.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1374\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.998</text>\n",
       "<text text-anchor=\"middle\" x=\"1374\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n",
       "<text text-anchor=\"middle\" x=\"1374\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 9]</text>\n",
       "</g>\n",
       "<!-- 47&#45;&gt;49 -->\n",
       "<g id=\"edge49\" class=\"edge\">\n",
       "<title>47&#45;&gt;49</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1331.45,-400.88C1336.74,-392.33 1342.49,-383.01 1348.01,-374.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1351.16,-375.65 1353.43,-365.3 1345.2,-371.97 1351.16,-375.65\"/>\n",
       "</g>\n",
       "<!-- 50 -->\n",
       "<g id=\"node51\" class=\"node\">\n",
       "<title>50</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1365,-261 1249,-261 1249,-193 1365,-193 1365,-261\"/>\n",
       "<text text-anchor=\"middle\" x=\"1307\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 193.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1307\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.592</text>\n",
       "<text text-anchor=\"middle\" x=\"1307\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7</text>\n",
       "<text text-anchor=\"middle\" x=\"1307\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 6]</text>\n",
       "</g>\n",
       "<!-- 49&#45;&gt;50 -->\n",
       "<g id=\"edge50\" class=\"edge\">\n",
       "<title>49&#45;&gt;50</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1352.25,-296.88C1346.57,-288.24 1340.38,-278.82 1334.45,-269.79\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1337.29,-267.74 1328.87,-261.3 1331.44,-271.58 1337.29,-267.74\"/>\n",
       "</g>\n",
       "<!-- 53 -->\n",
       "<g id=\"node54\" class=\"node\">\n",
       "<title>53</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1499,-261 1383,-261 1383,-193 1499,-193 1499,-261\"/>\n",
       "<text text-anchor=\"middle\" x=\"1441\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 34.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1441\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.881</text>\n",
       "<text text-anchor=\"middle\" x=\"1441\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10</text>\n",
       "<text text-anchor=\"middle\" x=\"1441\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [7, 3]</text>\n",
       "</g>\n",
       "<!-- 49&#45;&gt;53 -->\n",
       "<g id=\"edge53\" class=\"edge\">\n",
       "<title>49&#45;&gt;53</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1395.75,-296.88C1401.43,-288.24 1407.62,-278.82 1413.55,-269.79\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1416.56,-271.58 1419.13,-261.3 1410.71,-267.74 1416.56,-271.58\"/>\n",
       "</g>\n",
       "<!-- 51 -->\n",
       "<g id=\"node52\" class=\"node\">\n",
       "<title>51</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1243,-149.5 1143,-149.5 1143,-96.5 1243,-96.5 1243,-149.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1193\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1193\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1193\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 6]</text>\n",
       "</g>\n",
       "<!-- 50&#45;&gt;51 -->\n",
       "<g id=\"edge51\" class=\"edge\">\n",
       "<title>50&#45;&gt;51</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1269.99,-192.88C1256.84,-181.12 1242.06,-167.89 1228.99,-156.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1231.31,-153.58 1221.52,-149.52 1226.64,-158.8 1231.31,-153.58\"/>\n",
       "</g>\n",
       "<!-- 52 -->\n",
       "<g id=\"node53\" class=\"node\">\n",
       "<title>52</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1361,-149.5 1261,-149.5 1261,-96.5 1361,-96.5 1361,-149.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1311\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 50&#45;&gt;52 -->\n",
       "<g id=\"edge52\" class=\"edge\">\n",
       "<title>50&#45;&gt;52</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1308.3,-192.88C1308.72,-182.22 1309.18,-170.35 1309.61,-159.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1313.1,-159.65 1310,-149.52 1306.11,-159.38 1313.1,-159.65\"/>\n",
       "</g>\n",
       "<!-- 54 -->\n",
       "<g id=\"node55\" class=\"node\">\n",
       "<title>54</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1487,-149.5 1387,-149.5 1387,-96.5 1487,-96.5 1487,-149.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1437\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1437\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"1437\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5, 0]</text>\n",
       "</g>\n",
       "<!-- 53&#45;&gt;54 -->\n",
       "<g id=\"edge54\" class=\"edge\">\n",
       "<title>53&#45;&gt;54</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1439.7,-192.88C1439.28,-182.22 1438.82,-170.35 1438.39,-159.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1441.89,-159.38 1438,-149.52 1434.9,-159.65 1441.89,-159.38\"/>\n",
       "</g>\n",
       "<!-- 55 -->\n",
       "<g id=\"node56\" class=\"node\">\n",
       "<title>55</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1621,-157 1505,-157 1505,-89 1621,-89 1621,-157\"/>\n",
       "<text text-anchor=\"middle\" x=\"1563\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 175.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1563\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.971</text>\n",
       "<text text-anchor=\"middle\" x=\"1563\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"1563\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 3]</text>\n",
       "</g>\n",
       "<!-- 53&#45;&gt;55 -->\n",
       "<g id=\"edge55\" class=\"edge\">\n",
       "<title>53&#45;&gt;55</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1480.61,-192.88C1491.69,-183.62 1503.85,-173.45 1515.34,-163.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1517.74,-166.4 1523.17,-157.3 1513.25,-161.03 1517.74,-166.4\"/>\n",
       "</g>\n",
       "<!-- 56 -->\n",
       "<g id=\"node57\" class=\"node\">\n",
       "<title>56</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1554,-53 1454,-53 1454,0 1554,0 1554,-53\"/>\n",
       "<text text-anchor=\"middle\" x=\"1504\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1504\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1504\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 55&#45;&gt;56 -->\n",
       "<g id=\"edge56\" class=\"edge\">\n",
       "<title>55&#45;&gt;56</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1542.36,-88.95C1536.88,-80.17 1530.95,-70.66 1525.42,-61.82\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1528.33,-59.87 1520.07,-53.24 1522.4,-63.57 1528.33,-59.87\"/>\n",
       "</g>\n",
       "<!-- 57 -->\n",
       "<g id=\"node58\" class=\"node\">\n",
       "<title>57</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1672,-53 1572,-53 1572,0 1672,0 1672,-53\"/>\n",
       "<text text-anchor=\"middle\" x=\"1622\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1622\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1622\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 55&#45;&gt;57 -->\n",
       "<g id=\"edge57\" class=\"edge\">\n",
       "<title>55&#45;&gt;57</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1583.64,-88.95C1589.12,-80.17 1595.05,-70.66 1600.58,-61.82\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1603.6,-63.57 1605.93,-53.24 1597.67,-59.87 1603.6,-63.57\"/>\n",
       "</g>\n",
       "<!-- 59 -->\n",
       "<g id=\"node60\" class=\"node\">\n",
       "<title>59</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1444,-677 1328,-677 1328,-609 1444,-609 1444,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1386\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 153.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1386\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.918</text>\n",
       "<text text-anchor=\"middle\" x=\"1386\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1386\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 1]</text>\n",
       "</g>\n",
       "<!-- 58&#45;&gt;59 -->\n",
       "<g id=\"edge59\" class=\"edge\">\n",
       "<title>58&#45;&gt;59</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1385.32,-712.88C1385.4,-704.78 1385.49,-695.98 1385.57,-687.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1389.08,-687.33 1385.67,-677.3 1382.08,-687.26 1389.08,-687.33\"/>\n",
       "</g>\n",
       "<!-- 62 -->\n",
       "<g id=\"node63\" class=\"node\">\n",
       "<title>62</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1672,-677 1556,-677 1556,-609 1672,-609 1672,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 27.15</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.337</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 15]</text>\n",
       "</g>\n",
       "<!-- 58&#45;&gt;62 -->\n",
       "<g id=\"edge62\" class=\"edge\">\n",
       "<title>58&#45;&gt;62</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1443.01,-717.18C1446.04,-715.75 1449.05,-714.35 1452,-713 1482.84,-698.85 1517.39,-684 1546.63,-671.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1548.06,-674.92 1555.93,-667.82 1545.35,-668.46 1548.06,-674.92\"/>\n",
       "</g>\n",
       "<!-- 60 -->\n",
       "<g id=\"node61\" class=\"node\">\n",
       "<title>60</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1428,-565.5 1328,-565.5 1328,-512.5 1428,-512.5 1428,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1378\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1378\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1378\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 59&#45;&gt;60 -->\n",
       "<g id=\"edge60\" class=\"edge\">\n",
       "<title>59&#45;&gt;60</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1383.4,-608.88C1382.57,-598.22 1381.64,-586.35 1380.79,-575.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1384.27,-575.22 1380,-565.52 1377.29,-575.76 1384.27,-575.22\"/>\n",
       "</g>\n",
       "<!-- 61 -->\n",
       "<g id=\"node62\" class=\"node\">\n",
       "<title>61</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1546,-565.5 1446,-565.5 1446,-512.5 1546,-512.5 1546,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1496\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1496\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1496\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 59&#45;&gt;61 -->\n",
       "<g id=\"edge61\" class=\"edge\">\n",
       "<title>59&#45;&gt;61</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1421.71,-608.88C1434.29,-597.23 1448.4,-584.14 1460.92,-572.53\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1463.53,-574.89 1468.48,-565.52 1458.77,-569.75 1463.53,-574.89\"/>\n",
       "</g>\n",
       "<!-- 63 -->\n",
       "<g id=\"node64\" class=\"node\">\n",
       "<title>63</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1664,-573 1564,-573 1564,-505 1664,-505 1664,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 71.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1614\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "</g>\n",
       "<!-- 62&#45;&gt;63 -->\n",
       "<g id=\"edge63\" class=\"edge\">\n",
       "<title>62&#45;&gt;63</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1614,-608.88C1614,-600.78 1614,-591.98 1614,-583.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1617.5,-583.3 1614,-573.3 1610.5,-583.3 1617.5,-583.3\"/>\n",
       "</g>\n",
       "<!-- 66 -->\n",
       "<g id=\"node67\" class=\"node\">\n",
       "<title>66</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1787.5,-565.5 1682.5,-565.5 1682.5,-512.5 1787.5,-512.5 1787.5,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1735\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1735\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1735\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 14]</text>\n",
       "</g>\n",
       "<!-- 62&#45;&gt;66 -->\n",
       "<g id=\"edge66\" class=\"edge\">\n",
       "<title>62&#45;&gt;66</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1653.29,-608.88C1667.24,-597.12 1682.93,-583.89 1696.8,-572.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1699.34,-574.64 1704.73,-565.52 1694.82,-569.29 1699.34,-574.64\"/>\n",
       "</g>\n",
       "<!-- 64 -->\n",
       "<g id=\"node65\" class=\"node\">\n",
       "<title>64</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1605,-461.5 1505,-461.5 1505,-408.5 1605,-408.5 1605,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1555\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1555\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1555\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 63&#45;&gt;64 -->\n",
       "<g id=\"edge64\" class=\"edge\">\n",
       "<title>63&#45;&gt;64</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1594.84,-504.88C1588.42,-493.78 1581.24,-481.37 1574.77,-470.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1577.8,-468.42 1569.76,-461.52 1571.74,-471.93 1577.8,-468.42\"/>\n",
       "</g>\n",
       "<!-- 65 -->\n",
       "<g id=\"node66\" class=\"node\">\n",
       "<title>65</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1723,-461.5 1623,-461.5 1623,-408.5 1723,-408.5 1723,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1673\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1673\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1673\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 63&#45;&gt;65 -->\n",
       "<g id=\"edge65\" class=\"edge\">\n",
       "<title>63&#45;&gt;65</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1633.16,-504.88C1639.58,-493.78 1646.76,-481.37 1653.23,-470.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1656.26,-471.93 1658.24,-461.52 1650.2,-468.42 1656.26,-471.93\"/>\n",
       "</g>\n",
       "<!-- 69 -->\n",
       "<g id=\"node70\" class=\"node\">\n",
       "<title>69</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1569,-989 1453,-989 1453,-921 1569,-921 1569,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 27.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.918</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 4]</text>\n",
       "</g>\n",
       "<!-- 68&#45;&gt;69 -->\n",
       "<g id=\"edge69\" class=\"edge\">\n",
       "<title>68&#45;&gt;69</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1511,-1024.88C1511,-1016.78 1511,-1007.98 1511,-999.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1514.5,-999.3 1511,-989.3 1507.5,-999.3 1514.5,-999.3\"/>\n",
       "</g>\n",
       "<!-- 74 -->\n",
       "<g id=\"node75\" class=\"node\">\n",
       "<title>74</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1692.5,-981.5 1587.5,-981.5 1587.5,-928.5 1692.5,-928.5 1692.5,-981.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1640\" y=\"-966.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1640\" y=\"-951.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 23</text>\n",
       "<text text-anchor=\"middle\" x=\"1640\" y=\"-936.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 23]</text>\n",
       "</g>\n",
       "<!-- 68&#45;&gt;74 -->\n",
       "<g id=\"edge74\" class=\"edge\">\n",
       "<title>68&#45;&gt;74</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1552.88,-1024.88C1567.9,-1013.01 1584.8,-999.65 1599.69,-987.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1602.05,-990.47 1607.72,-981.52 1597.71,-984.98 1602.05,-990.47\"/>\n",
       "</g>\n",
       "<!-- 70 -->\n",
       "<g id=\"node71\" class=\"node\">\n",
       "<title>70</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1569,-885 1453,-885 1453,-817 1569,-817 1569,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 35.9</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.918</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 1]</text>\n",
       "</g>\n",
       "<!-- 69&#45;&gt;70 -->\n",
       "<g id=\"edge70\" class=\"edge\">\n",
       "<title>69&#45;&gt;70</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1511,-920.88C1511,-912.78 1511,-903.98 1511,-895.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1514.5,-895.3 1511,-885.3 1507.5,-895.3 1514.5,-895.3\"/>\n",
       "</g>\n",
       "<!-- 73 -->\n",
       "<g id=\"node74\" class=\"node\">\n",
       "<title>73</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1687,-877.5 1587,-877.5 1587,-824.5 1687,-824.5 1687,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1637\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1637\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1637\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 69&#45;&gt;73 -->\n",
       "<g id=\"edge73\" class=\"edge\">\n",
       "<title>69&#45;&gt;73</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1551.91,-920.88C1566.58,-909.01 1583.08,-895.65 1597.62,-883.88\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1599.91,-886.53 1605.48,-877.52 1595.5,-881.09 1599.91,-886.53\"/>\n",
       "</g>\n",
       "<!-- 71 -->\n",
       "<g id=\"node72\" class=\"node\">\n",
       "<title>71</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1561,-773.5 1461,-773.5 1461,-720.5 1561,-720.5 1561,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1511\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 70&#45;&gt;71 -->\n",
       "<g id=\"edge71\" class=\"edge\">\n",
       "<title>70&#45;&gt;71</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1511,-816.88C1511,-806.33 1511,-794.6 1511,-783.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1514.5,-783.52 1511,-773.52 1507.5,-783.52 1514.5,-783.52\"/>\n",
       "</g>\n",
       "<!-- 72 -->\n",
       "<g id=\"node73\" class=\"node\">\n",
       "<title>72</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1679,-773.5 1579,-773.5 1579,-720.5 1679,-720.5 1679,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1629\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">entropy = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1629\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1629\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 70&#45;&gt;72 -->\n",
       "<g id=\"edge72\" class=\"edge\">\n",
       "<title>70&#45;&gt;72</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1549.31,-816.88C1562.92,-805.12 1578.22,-791.89 1591.75,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1594.2,-782.71 1599.48,-773.52 1589.62,-777.41 1594.2,-782.71\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x26d8d46c190>"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = sklearn.tree.DecisionTreeClassifier(criterion = \"entropy\")\n",
    "clf.fit(train_data_remove, outcome_train)\n",
    "\n",
    "dot_data = tree.export_graphviz(clf, out_file=None)\n",
    "graph = graphviz.Source(dot_data)\n",
    "graph.render(\"Diabetes\")\n",
    "\n",
    "graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID3 Testing accuracy:  0.7457627118644068\n"
     ]
    }
   ],
   "source": [
    "test_array = clf.predict(test_data_remove).tolist()\n",
    "ID3TestAccuracy = sklearn.metrics.accuracy_score(outcome_test, test_array)\n",
    "\n",
    "print('ID3 Testing accuracy: ',ID3TestAccuracy)\n",
    "\n",
    "saveResult('ID3', ID3TestAccuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "_uuid": "9d3bd72bb6be40fa8ad2592b74146f2801c238d4"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation = df.corr()\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(correlation, vmin=-1, vmax=1)\n",
    "fig.colorbar(cax)\n",
    "ticks = np.arange(0,9,1)\n",
    "ax.set_xticks(ticks)\n",
    "ax.set_yticks(ticks)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "_uuid": "11e22eaf64a5bac5ab75a323020d9d924e6fa036",
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID3 Training accuracy:  1.0\n"
     ]
    }
   ],
   "source": [
    "train_array = clf.predict(train_data_remove).tolist()\n",
    "ID3TrainAccuracy = sklearn.metrics.accuracy_score(outcome_train, train_array)\n",
    "\n",
    "print('ID3 Training accuracy: ',ID3TrainAccuracy)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.C4.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "_uuid": "774cf7db8cf0f0c5a74a435cae1186a7705d33b4"
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.49.3 (20211023.0002)\n",
       " -->\n",
       "<!-- Title: Tree Pages: 1 -->\n",
       "<svg width=\"2129pt\" height=\"1309pt\"\n",
       " viewBox=\"0.00 0.00 2129.00 1309.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 1305)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-1305 2125,-1305 2125,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1245.5,-1301 1123.5,-1301 1123.5,-1233 1245.5,-1233 1245.5,-1301\"/>\n",
       "<text text-anchor=\"middle\" x=\"1184.5\" y=\"-1285.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 127.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1184.5\" y=\"-1270.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.425</text>\n",
       "<text text-anchor=\"middle\" x=\"1184.5\" y=\"-1255.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 274</text>\n",
       "<text text-anchor=\"middle\" x=\"1184.5\" y=\"-1240.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [190, 84]</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"896.5,-1197 774.5,-1197 774.5,-1129 896.5,-1129 896.5,-1197\"/>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1181.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.66</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1166.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.209</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1151.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 169</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1136.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [149, 20]</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1123.31,-1248.12C1062.82,-1230.44 970.31,-1203.4 906.59,-1184.78\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"907.2,-1181.31 896.62,-1181.86 905.24,-1188.03 907.2,-1181.31\"/>\n",
       "<text text-anchor=\"middle\" x=\"908.63\" y=\"-1200.09\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n",
       "</g>\n",
       "<!-- 42 -->\n",
       "<g id=\"node43\" class=\"node\">\n",
       "<title>42</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1497,-1197 1384,-1197 1384,-1129 1497,-1129 1497,-1197\"/>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1181.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 165.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1166.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.476</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1151.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 105</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1136.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [41, 64]</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;42 -->\n",
       "<g id=\"edge42\" class=\"edge\">\n",
       "<title>0&#45;&gt;42</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1245.82,-1241.57C1284.57,-1226.13 1334.64,-1206.18 1374.3,-1190.38\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1375.63,-1193.61 1383.62,-1186.66 1373.04,-1187.11 1375.63,-1193.61\"/>\n",
       "<text text-anchor=\"middle\" x=\"1373.75\" y=\"-1205.93\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"539,-1093 426,-1093 426,-1025 539,-1025 539,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 45.2</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.107</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 124</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [117, 7]</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M774.42,-1144.35C711.44,-1126.15 613.57,-1097.87 548.76,-1079.15\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"549.63,-1075.75 539.05,-1076.34 547.69,-1082.48 549.63,-1075.75\"/>\n",
       "</g>\n",
       "<!-- 23 -->\n",
       "<g id=\"node24\" class=\"node\">\n",
       "<title>23</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"892,-1093 779,-1093 779,-1025 892,-1025 892,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[0] &lt;= 2.5</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.411</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 45</text>\n",
       "<text text-anchor=\"middle\" x=\"835.5\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [32, 13]</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;23 -->\n",
       "<g id=\"edge23\" class=\"edge\">\n",
       "<title>1&#45;&gt;23</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M835.5,-1128.88C835.5,-1120.78 835.5,-1111.98 835.5,-1103.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"839,-1103.3 835.5,-1093.3 832,-1103.3 839,-1103.3\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"359,-989 246,-989 246,-921 359,-921 359,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 81.0</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.079</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 121</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [116, 5]</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M425.55,-1025.73C407.23,-1015.35 386.79,-1003.77 367.92,-993.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"369.51,-989.95 359.08,-988.06 366.06,-996.04 369.51,-989.95\"/>\n",
       "</g>\n",
       "<!-- 20 -->\n",
       "<g id=\"node21\" class=\"node\">\n",
       "<title>20</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"534,-989 431,-989 431,-921 534,-921 534,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 134.0</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"482.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 2]</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;20 -->\n",
       "<g id=\"edge20\" class=\"edge\">\n",
       "<title>2&#45;&gt;20</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M482.5,-1024.88C482.5,-1016.78 482.5,-1007.98 482.5,-999.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"486,-999.3 482.5,-989.3 479,-999.3 486,-999.3\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"232,-885 119,-885 119,-817 232,-817 232,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.505</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.038</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 104</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [102, 2]</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>3&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M261.27,-920.88C249.62,-911.53 236.83,-901.26 224.77,-891.57\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"226.95,-888.83 216.96,-885.3 222.57,-894.29 226.95,-888.83\"/>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>13</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"355,-885 250,-885 250,-817 355,-817 355,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[0] &lt;= 1.5</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.291</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n",
       "<text text-anchor=\"middle\" x=\"302.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [14, 3]</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;13 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>3&#45;&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M302.5,-920.88C302.5,-912.78 302.5,-903.98 302.5,-895.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"306,-895.3 302.5,-885.3 299,-895.3 306,-895.3\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>5</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"105,-773.5 0,-773.5 0,-720.5 105,-720.5 105,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"52.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"52.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 87</text>\n",
       "<text text-anchor=\"middle\" x=\"52.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [87, 0]</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;5 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>4&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M135.57,-816.88C121.37,-805.12 105.43,-791.89 91.33,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"93.21,-777.21 83.27,-773.52 88.74,-782.6 93.21,-777.21\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>6</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"228,-781 123,-781 123,-713 228,-713 228,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.515</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.208</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n",
       "<text text-anchor=\"middle\" x=\"175.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 2]</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;6 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>4&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M175.5,-816.88C175.5,-808.78 175.5,-799.98 175.5,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"179,-791.3 175.5,-781.3 172,-791.3 179,-791.3\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>7</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"106,-669.5 9,-669.5 9,-616.5 106,-616.5 106,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"57.5\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"57.5\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"57.5\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 6&#45;&gt;7 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>6&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M137.19,-712.88C123.58,-701.12 108.28,-687.89 94.75,-676.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"96.88,-673.41 87.02,-669.52 92.3,-678.71 96.88,-673.41\"/>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"229,-677 124,-677 124,-609 229,-609 229,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"176.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 30.0</text>\n",
       "<text text-anchor=\"middle\" x=\"176.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.117</text>\n",
       "<text text-anchor=\"middle\" x=\"176.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n",
       "<text text-anchor=\"middle\" x=\"176.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 1]</text>\n",
       "</g>\n",
       "<!-- 6&#45;&gt;8 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>6&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M175.82,-712.88C175.9,-704.78 175.99,-695.98 176.07,-687.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"179.58,-687.33 176.17,-677.3 172.58,-687.26 179.58,-687.33\"/>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"170,-565.5 65,-565.5 65,-512.5 170,-512.5 170,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"117.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"117.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"117.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [14, 0]</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;9 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>8&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M157.34,-608.88C150.92,-597.78 143.74,-585.37 137.27,-574.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"140.3,-572.42 132.26,-565.52 134.24,-575.93 140.3,-572.42\"/>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>10</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"285,-573 188,-573 188,-505 285,-505 285,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"236.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 35.0</text>\n",
       "<text text-anchor=\"middle\" x=\"236.5\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"236.5\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"236.5\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;10 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>8&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M195.98,-608.88C201.01,-600.33 206.49,-591.01 211.75,-582.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"214.86,-583.69 216.91,-573.3 208.83,-580.14 214.86,-583.69\"/>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>11</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"228,-461.5 131,-461.5 131,-408.5 228,-408.5 228,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"179.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"179.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"179.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;11 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>10&#45;&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M217.99,-504.88C211.85,-493.89 204.99,-481.62 198.79,-470.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"201.69,-468.54 193.76,-461.52 195.58,-471.96 201.69,-468.54\"/>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>12</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"343,-461.5 246,-461.5 246,-408.5 343,-408.5 343,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"294.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"294.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"294.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;12 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>10&#45;&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M255.33,-504.88C261.58,-493.89 268.56,-481.62 274.87,-470.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"278.09,-471.94 279.99,-461.52 272,-468.48 278.09,-471.94\"/>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>14</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"349,-781 252,-781 252,-713 349,-713 349,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"300.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 23.5</text>\n",
       "<text text-anchor=\"middle\" x=\"300.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.49</text>\n",
       "<text text-anchor=\"middle\" x=\"300.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7</text>\n",
       "<text text-anchor=\"middle\" x=\"300.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 3]</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;14 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>13&#45;&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M301.85,-816.88C301.69,-808.78 301.52,-799.98 301.35,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"304.85,-791.23 301.15,-781.3 297.85,-791.37 304.85,-791.23\"/>\n",
       "</g>\n",
       "<!-- 19 -->\n",
       "<g id=\"node20\" class=\"node\">\n",
       "<title>19</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"472,-773.5 367,-773.5 367,-720.5 472,-720.5 472,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"419.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"419.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10</text>\n",
       "<text text-anchor=\"middle\" x=\"419.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [10, 0]</text>\n",
       "</g>\n",
       "<!-- 13&#45;&gt;19 -->\n",
       "<g id=\"edge19\" class=\"edge\">\n",
       "<title>13&#45;&gt;19</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M340.49,-816.88C353.98,-805.12 369.15,-791.89 382.56,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"384.99,-782.73 390.23,-773.52 380.39,-777.45 384.99,-782.73\"/>\n",
       "</g>\n",
       "<!-- 15 -->\n",
       "<g id=\"node16\" class=\"node\">\n",
       "<title>15</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"348,-669.5 251,-669.5 251,-616.5 348,-616.5 348,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"299.5\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"299.5\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"299.5\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "</g>\n",
       "<!-- 14&#45;&gt;15 -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>14&#45;&gt;15</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M300.18,-712.88C300.07,-702.33 299.96,-690.6 299.85,-679.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"303.35,-679.49 299.75,-669.52 296.35,-679.55 303.35,-679.49\"/>\n",
       "</g>\n",
       "<!-- 16 -->\n",
       "<g id=\"node17\" class=\"node\">\n",
       "<title>16</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"469,-677 366,-677 366,-609 469,-609 469,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"417.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 121.5</text>\n",
       "<text text-anchor=\"middle\" x=\"417.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.375</text>\n",
       "<text text-anchor=\"middle\" x=\"417.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"417.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 3]</text>\n",
       "</g>\n",
       "<!-- 14&#45;&gt;16 -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>14&#45;&gt;16</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M338.49,-712.88C349.01,-703.71 360.55,-693.65 371.48,-684.12\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"374.07,-686.51 379.3,-677.3 369.47,-681.23 374.07,-686.51\"/>\n",
       "</g>\n",
       "<!-- 17 -->\n",
       "<g id=\"node18\" class=\"node\">\n",
       "<title>17</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"465,-565.5 368,-565.5 368,-512.5 465,-512.5 465,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"416.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"416.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"416.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;17 -->\n",
       "<g id=\"edge17\" class=\"edge\">\n",
       "<title>16&#45;&gt;17</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M417.18,-608.88C417.07,-598.33 416.96,-586.6 416.85,-575.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"420.35,-575.49 416.75,-565.52 413.35,-575.55 420.35,-575.49\"/>\n",
       "</g>\n",
       "<!-- 18 -->\n",
       "<g id=\"node19\" class=\"node\">\n",
       "<title>18</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"580,-565.5 483,-565.5 483,-512.5 580,-512.5 580,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"531.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"531.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"531.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;18 -->\n",
       "<g id=\"edge18\" class=\"edge\">\n",
       "<title>16&#45;&gt;18</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M454.51,-608.88C467.66,-597.12 482.44,-583.89 495.51,-572.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"497.86,-574.8 502.98,-565.52 493.19,-569.58 497.86,-574.8\"/>\n",
       "</g>\n",
       "<!-- 21 -->\n",
       "<g id=\"node22\" class=\"node\">\n",
       "<title>21</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"470,-877.5 373,-877.5 373,-824.5 470,-824.5 470,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"421.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"421.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"421.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;21 -->\n",
       "<g id=\"edge21\" class=\"edge\">\n",
       "<title>20&#45;&gt;21</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M462.7,-920.88C456.05,-909.78 448.63,-897.37 441.94,-886.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"444.9,-884.31 436.76,-877.52 438.89,-887.9 444.9,-884.31\"/>\n",
       "</g>\n",
       "<!-- 22 -->\n",
       "<g id=\"node23\" class=\"node\">\n",
       "<title>22</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"585,-877.5 488,-877.5 488,-824.5 585,-824.5 585,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"536.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"536.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"536.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;22 -->\n",
       "<g id=\"edge22\" class=\"edge\">\n",
       "<title>20&#45;&gt;22</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M500.03,-920.88C505.85,-909.89 512.35,-897.62 518.23,-886.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"521.4,-888 522.99,-877.52 515.22,-884.72 521.4,-888\"/>\n",
       "</g>\n",
       "<!-- 24 -->\n",
       "<g id=\"node25\" class=\"node\">\n",
       "<title>24</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"825,-989 720,-989 720,-921 825,-921 825,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"772.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.779</text>\n",
       "<text text-anchor=\"middle\" x=\"772.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.211</text>\n",
       "<text text-anchor=\"middle\" x=\"772.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 25</text>\n",
       "<text text-anchor=\"middle\" x=\"772.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [22, 3]</text>\n",
       "</g>\n",
       "<!-- 23&#45;&gt;24 -->\n",
       "<g id=\"edge24\" class=\"edge\">\n",
       "<title>23&#45;&gt;24</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M815.05,-1024.88C809.76,-1016.33 804.01,-1007.01 798.49,-998.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"801.3,-995.97 793.07,-989.3 795.34,-999.65 801.3,-995.97\"/>\n",
       "</g>\n",
       "<!-- 31 -->\n",
       "<g id=\"node32\" class=\"node\">\n",
       "<title>31</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"956,-989 843,-989 843,-921 956,-921 956,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"899.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.695</text>\n",
       "<text text-anchor=\"middle\" x=\"899.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"899.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\n",
       "<text text-anchor=\"middle\" x=\"899.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [10, 10]</text>\n",
       "</g>\n",
       "<!-- 23&#45;&gt;31 -->\n",
       "<g id=\"edge31\" class=\"edge\">\n",
       "<title>23&#45;&gt;31</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M856.28,-1024.88C861.7,-1016.24 867.61,-1006.82 873.28,-997.79\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"876.26,-999.63 878.61,-989.3 870.33,-995.91 876.26,-999.63\"/>\n",
       "</g>\n",
       "<!-- 25 -->\n",
       "<g id=\"node26\" class=\"node\">\n",
       "<title>25</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"706,-885 603,-885 603,-817 706,-817 706,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"654.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 131.0</text>\n",
       "<text text-anchor=\"middle\" x=\"654.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.42</text>\n",
       "<text text-anchor=\"middle\" x=\"654.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10</text>\n",
       "<text text-anchor=\"middle\" x=\"654.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [7, 3]</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;25 -->\n",
       "<g id=\"edge25\" class=\"edge\">\n",
       "<title>24&#45;&gt;25</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M734.19,-920.88C723.47,-911.62 711.71,-901.45 700.6,-891.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"702.88,-889.19 693.02,-885.3 698.3,-894.49 702.88,-889.19\"/>\n",
       "</g>\n",
       "<!-- 30 -->\n",
       "<g id=\"node31\" class=\"node\">\n",
       "<title>30</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"829,-877.5 724,-877.5 724,-824.5 829,-824.5 829,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"776.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"776.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15</text>\n",
       "<text text-anchor=\"middle\" x=\"776.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 0]</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;30 -->\n",
       "<g id=\"edge30\" class=\"edge\">\n",
       "<title>24&#45;&gt;30</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M773.8,-920.88C774.22,-910.22 774.68,-898.35 775.11,-887.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"778.6,-887.65 775.5,-877.52 771.61,-887.38 778.6,-887.65\"/>\n",
       "</g>\n",
       "<!-- 26 -->\n",
       "<g id=\"node27\" class=\"node\">\n",
       "<title>26</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"676,-781 573,-781 573,-713 676,-713 676,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"624.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.753</text>\n",
       "<text text-anchor=\"middle\" x=\"624.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.219</text>\n",
       "<text text-anchor=\"middle\" x=\"624.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n",
       "<text text-anchor=\"middle\" x=\"624.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [7, 1]</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;26 -->\n",
       "<g id=\"edge26\" class=\"edge\">\n",
       "<title>25&#45;&gt;26</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M644.76,-816.88C642.32,-808.6 639.68,-799.6 637.12,-790.91\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"640.47,-789.91 634.29,-781.3 633.76,-791.88 640.47,-789.91\"/>\n",
       "</g>\n",
       "<!-- 29 -->\n",
       "<g id=\"node30\" class=\"node\">\n",
       "<title>29</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"791,-773.5 694,-773.5 694,-720.5 791,-720.5 791,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"742.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"742.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"742.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 25&#45;&gt;29 -->\n",
       "<g id=\"edge29\" class=\"edge\">\n",
       "<title>25&#45;&gt;29</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M683.07,-816.88C692.94,-805.45 703.99,-792.63 713.87,-781.19\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"716.6,-783.38 720.48,-773.52 711.3,-778.81 716.6,-783.38\"/>\n",
       "</g>\n",
       "<!-- 27 -->\n",
       "<g id=\"node28\" class=\"node\">\n",
       "<title>27</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"620,-669.5 523,-669.5 523,-616.5 620,-616.5 620,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"571.5\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"571.5\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7</text>\n",
       "<text text-anchor=\"middle\" x=\"571.5\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [7, 0]</text>\n",
       "</g>\n",
       "<!-- 26&#45;&gt;27 -->\n",
       "<g id=\"edge27\" class=\"edge\">\n",
       "<title>26&#45;&gt;27</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M607.29,-712.88C601.58,-701.89 595.2,-689.62 589.44,-678.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"592.48,-676.78 584.76,-669.52 586.27,-680.01 592.48,-676.78\"/>\n",
       "</g>\n",
       "<!-- 28 -->\n",
       "<g id=\"node29\" class=\"node\">\n",
       "<title>28</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"735,-669.5 638,-669.5 638,-616.5 735,-616.5 735,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"686.5\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"686.5\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"686.5\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 26&#45;&gt;28 -->\n",
       "<g id=\"edge28\" class=\"edge\">\n",
       "<title>26&#45;&gt;28</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M644.63,-712.88C651.38,-701.78 658.92,-689.37 665.72,-678.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"668.78,-679.88 670.99,-669.52 662.8,-676.25 668.78,-679.88\"/>\n",
       "</g>\n",
       "<!-- 32 -->\n",
       "<g id=\"node33\" class=\"node\">\n",
       "<title>32</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"944,-877.5 847,-877.5 847,-824.5 944,-824.5 944,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 31&#45;&gt;32 -->\n",
       "<g id=\"edge32\" class=\"edge\">\n",
       "<title>31&#45;&gt;32</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M898.2,-920.88C897.78,-910.22 897.32,-898.35 896.89,-887.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"900.39,-887.38 896.5,-877.52 893.4,-887.65 900.39,-887.38\"/>\n",
       "</g>\n",
       "<!-- 33 -->\n",
       "<g id=\"node34\" class=\"node\">\n",
       "<title>33</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1067,-885 962,-885 962,-817 1067,-817 1067,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 1.071</text>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.484</text>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [10, 7]</text>\n",
       "</g>\n",
       "<!-- 31&#45;&gt;33 -->\n",
       "<g id=\"edge33\" class=\"edge\">\n",
       "<title>31&#45;&gt;33</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M936.84,-920.88C947.18,-911.71 958.52,-901.65 969.26,-892.12\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"971.8,-894.55 976.96,-885.3 967.15,-889.32 971.8,-894.55\"/>\n",
       "</g>\n",
       "<!-- 34 -->\n",
       "<g id=\"node35\" class=\"node\">\n",
       "<title>34</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"948,-781 843,-781 843,-713 948,-713 948,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 86.0</text>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.408</text>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"895.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [10, 4]</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;34 -->\n",
       "<g id=\"edge34\" class=\"edge\">\n",
       "<title>33&#45;&gt;34</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M975.86,-816.88C965.06,-807.62 953.2,-797.45 941.99,-787.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"944.22,-785.15 934.35,-781.3 939.66,-790.46 944.22,-785.15\"/>\n",
       "</g>\n",
       "<!-- 41 -->\n",
       "<g id=\"node42\" class=\"node\">\n",
       "<title>41</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1063,-773.5 966,-773.5 966,-720.5 1063,-720.5 1063,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1014.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;41 -->\n",
       "<g id=\"edge41\" class=\"edge\">\n",
       "<title>33&#45;&gt;41</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1014.5,-816.88C1014.5,-806.33 1014.5,-794.6 1014.5,-783.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1018,-783.52 1014.5,-773.52 1011,-783.52 1018,-783.52\"/>\n",
       "</g>\n",
       "<!-- 35 -->\n",
       "<g id=\"node36\" class=\"node\">\n",
       "<title>35</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"854,-669.5 757,-669.5 757,-616.5 854,-616.5 854,-669.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"805.5\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"805.5\" y=\"-639.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"805.5\" y=\"-624.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [6, 0]</text>\n",
       "</g>\n",
       "<!-- 34&#45;&gt;35 -->\n",
       "<g id=\"edge35\" class=\"edge\">\n",
       "<title>34&#45;&gt;35</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M866.28,-712.88C856.19,-701.45 844.88,-688.63 834.79,-677.19\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"837.26,-674.7 828.02,-669.52 832.01,-679.33 837.26,-674.7\"/>\n",
       "</g>\n",
       "<!-- 36 -->\n",
       "<g id=\"node37\" class=\"node\">\n",
       "<title>36</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"975,-677 872,-677 872,-609 975,-609 975,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"923.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 193.0</text>\n",
       "<text text-anchor=\"middle\" x=\"923.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"923.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n",
       "<text text-anchor=\"middle\" x=\"923.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 4]</text>\n",
       "</g>\n",
       "<!-- 34&#45;&gt;36 -->\n",
       "<g id=\"edge36\" class=\"edge\">\n",
       "<title>34&#45;&gt;36</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M904.59,-712.88C906.84,-704.69 909.28,-695.79 911.64,-687.19\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"915.09,-687.87 914.36,-677.3 908.34,-686.02 915.09,-687.87\"/>\n",
       "</g>\n",
       "<!-- 37 -->\n",
       "<g id=\"node38\" class=\"node\">\n",
       "<title>37</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"930,-573 833,-573 833,-505 930,-505 930,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"881.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 54.0</text>\n",
       "<text text-anchor=\"middle\" x=\"881.5\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.32</text>\n",
       "<text text-anchor=\"middle\" x=\"881.5\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"881.5\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 4]</text>\n",
       "</g>\n",
       "<!-- 36&#45;&gt;37 -->\n",
       "<g id=\"edge37\" class=\"edge\">\n",
       "<title>36&#45;&gt;37</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M909.86,-608.88C906.42,-600.51 902.67,-591.4 899.05,-582.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"902.26,-581.21 895.21,-573.3 895.78,-583.88 902.26,-581.21\"/>\n",
       "</g>\n",
       "<!-- 40 -->\n",
       "<g id=\"node41\" class=\"node\">\n",
       "<title>40</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1045,-565.5 948,-565.5 948,-512.5 1045,-512.5 1045,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"996.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"996.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"996.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "</g>\n",
       "<!-- 36&#45;&gt;40 -->\n",
       "<g id=\"edge40\" class=\"edge\">\n",
       "<title>36&#45;&gt;40</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M947.2,-608.88C955.23,-597.67 964.2,-585.13 972.27,-573.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"975.26,-575.69 978.24,-565.52 969.57,-571.61 975.26,-575.69\"/>\n",
       "</g>\n",
       "<!-- 38 -->\n",
       "<g id=\"node39\" class=\"node\">\n",
       "<title>38</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"891,-461.5 794,-461.5 794,-408.5 891,-408.5 891,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"842.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"842.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"842.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 37&#45;&gt;38 -->\n",
       "<g id=\"edge38\" class=\"edge\">\n",
       "<title>37&#45;&gt;38</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M868.84,-504.88C864.72,-494.11 860.13,-482.11 855.95,-471.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"859.1,-469.61 852.26,-461.52 852.56,-472.11 859.1,-469.61\"/>\n",
       "</g>\n",
       "<!-- 39 -->\n",
       "<g id=\"node40\" class=\"node\">\n",
       "<title>39</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1006,-461.5 909,-461.5 909,-408.5 1006,-408.5 1006,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"957.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"957.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"957.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 4]</text>\n",
       "</g>\n",
       "<!-- 37&#45;&gt;39 -->\n",
       "<g id=\"edge39\" class=\"edge\">\n",
       "<title>37&#45;&gt;39</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M906.18,-504.88C914.53,-493.67 923.88,-481.13 932.28,-469.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"935.32,-471.63 938.49,-461.52 929.7,-467.45 935.32,-471.63\"/>\n",
       "</g>\n",
       "<!-- 43 -->\n",
       "<g id=\"node44\" class=\"node\">\n",
       "<title>43</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1497,-1093 1384,-1093 1384,-1025 1497,-1025 1497,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 23.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 76</text>\n",
       "<text text-anchor=\"middle\" x=\"1440.5\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [39, 37]</text>\n",
       "</g>\n",
       "<!-- 42&#45;&gt;43 -->\n",
       "<g id=\"edge43\" class=\"edge\">\n",
       "<title>42&#45;&gt;43</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1440.5,-1128.88C1440.5,-1120.78 1440.5,-1111.98 1440.5,-1103.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1444,-1103.3 1440.5,-1093.3 1437,-1103.3 1444,-1103.3\"/>\n",
       "</g>\n",
       "<!-- 84 -->\n",
       "<g id=\"node85\" class=\"node\">\n",
       "<title>84</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1681,-1093 1576,-1093 1576,-1025 1681,-1025 1681,-1093\"/>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-1077.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 97.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-1062.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.128</text>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-1047.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 29</text>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-1032.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 27]</text>\n",
       "</g>\n",
       "<!-- 42&#45;&gt;84 -->\n",
       "<g id=\"edge84\" class=\"edge\">\n",
       "<title>42&#45;&gt;84</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1497.16,-1131.26C1519.21,-1119.3 1544.53,-1105.56 1567.02,-1093.36\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1568.69,-1096.43 1575.81,-1088.59 1565.35,-1090.28 1568.69,-1096.43\"/>\n",
       "</g>\n",
       "<!-- 44 -->\n",
       "<g id=\"node45\" class=\"node\">\n",
       "<title>44</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1399,-989 1294,-989 1294,-921 1399,-921 1399,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1346.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 61.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1346.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.133</text>\n",
       "<text text-anchor=\"middle\" x=\"1346.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1346.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [13, 1]</text>\n",
       "</g>\n",
       "<!-- 43&#45;&gt;44 -->\n",
       "<g id=\"edge44\" class=\"edge\">\n",
       "<title>43&#45;&gt;44</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1409.98,-1024.88C1401.69,-1015.89 1392.62,-1006.04 1383.99,-996.68\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1386.54,-994.28 1377.19,-989.3 1381.39,-999.02 1386.54,-994.28\"/>\n",
       "</g>\n",
       "<!-- 49 -->\n",
       "<g id=\"node50\" class=\"node\">\n",
       "<title>49</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1530,-989 1417,-989 1417,-921 1530,-921 1530,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1473.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 26.3</text>\n",
       "<text text-anchor=\"middle\" x=\"1473.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.487</text>\n",
       "<text text-anchor=\"middle\" x=\"1473.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 62</text>\n",
       "<text text-anchor=\"middle\" x=\"1473.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [26, 36]</text>\n",
       "</g>\n",
       "<!-- 43&#45;&gt;49 -->\n",
       "<g id=\"edge49\" class=\"edge\">\n",
       "<title>43&#45;&gt;49</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1451.21,-1024.88C1453.89,-1016.6 1456.81,-1007.6 1459.62,-998.91\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1462.98,-999.89 1462.73,-989.3 1456.32,-997.74 1462.98,-999.89\"/>\n",
       "</g>\n",
       "<!-- 45 -->\n",
       "<g id=\"node46\" class=\"node\">\n",
       "<title>45</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1278,-885 1181,-885 1181,-817 1278,-817 1278,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1229.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[4] &lt;= 30.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1229.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1229.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1229.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "</g>\n",
       "<!-- 44&#45;&gt;45 -->\n",
       "<g id=\"edge45\" class=\"edge\">\n",
       "<title>44&#45;&gt;45</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1308.51,-920.88C1297.99,-911.71 1286.45,-901.65 1275.52,-892.12\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1277.53,-889.23 1267.7,-885.3 1272.93,-894.51 1277.53,-889.23\"/>\n",
       "</g>\n",
       "<!-- 48 -->\n",
       "<g id=\"node49\" class=\"node\">\n",
       "<title>48</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1401,-877.5 1296,-877.5 1296,-824.5 1401,-824.5 1401,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1348.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1348.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 12</text>\n",
       "<text text-anchor=\"middle\" x=\"1348.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [12, 0]</text>\n",
       "</g>\n",
       "<!-- 44&#45;&gt;48 -->\n",
       "<g id=\"edge48\" class=\"edge\">\n",
       "<title>44&#45;&gt;48</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1347.15,-920.88C1347.36,-910.22 1347.59,-898.35 1347.8,-887.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1351.3,-887.59 1348,-877.52 1344.3,-887.45 1351.3,-887.59\"/>\n",
       "</g>\n",
       "<!-- 46 -->\n",
       "<g id=\"node47\" class=\"node\">\n",
       "<title>46</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1178,-773.5 1081,-773.5 1081,-720.5 1178,-720.5 1178,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1129.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1129.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1129.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 45&#45;&gt;46 -->\n",
       "<g id=\"edge46\" class=\"edge\">\n",
       "<title>45&#45;&gt;46</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1197.03,-816.88C1185.71,-805.34 1173.02,-792.39 1161.72,-780.86\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1164.02,-778.21 1154.52,-773.52 1159.02,-783.11 1164.02,-778.21\"/>\n",
       "</g>\n",
       "<!-- 47 -->\n",
       "<g id=\"node48\" class=\"node\">\n",
       "<title>47</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1293,-773.5 1196,-773.5 1196,-720.5 1293,-720.5 1293,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1244.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1244.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1244.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 45&#45;&gt;47 -->\n",
       "<g id=\"edge47\" class=\"edge\">\n",
       "<title>45&#45;&gt;47</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1234.37,-816.88C1235.94,-806.22 1237.68,-794.35 1239.28,-783.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1242.75,-783.92 1240.75,-773.52 1235.83,-782.9 1242.75,-783.92\"/>\n",
       "</g>\n",
       "<!-- 50 -->\n",
       "<g id=\"node51\" class=\"node\">\n",
       "<title>50</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1524,-885 1421,-885 1421,-817 1524,-817 1524,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1472.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 159.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1472.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.278</text>\n",
       "<text text-anchor=\"middle\" x=\"1472.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1472.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5, 1]</text>\n",
       "</g>\n",
       "<!-- 49&#45;&gt;50 -->\n",
       "<g id=\"edge50\" class=\"edge\">\n",
       "<title>49&#45;&gt;50</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1473.18,-920.88C1473.1,-912.78 1473.01,-903.98 1472.93,-895.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1476.42,-895.26 1472.83,-885.3 1469.42,-895.33 1476.42,-895.26\"/>\n",
       "</g>\n",
       "<!-- 53 -->\n",
       "<g id=\"node54\" class=\"node\">\n",
       "<title>53</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1655,-885 1542,-885 1542,-817 1655,-817 1655,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1598.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 40.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1598.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.469</text>\n",
       "<text text-anchor=\"middle\" x=\"1598.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 56</text>\n",
       "<text text-anchor=\"middle\" x=\"1598.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [21, 35]</text>\n",
       "</g>\n",
       "<!-- 49&#45;&gt;53 -->\n",
       "<g id=\"edge53\" class=\"edge\">\n",
       "<title>49&#45;&gt;53</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1514.08,-920.88C1525.44,-911.62 1537.89,-901.45 1549.67,-891.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1552.16,-894.33 1557.69,-885.3 1547.73,-888.91 1552.16,-894.33\"/>\n",
       "</g>\n",
       "<!-- 51 -->\n",
       "<g id=\"node52\" class=\"node\">\n",
       "<title>51</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1408,-773.5 1311,-773.5 1311,-720.5 1408,-720.5 1408,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1359.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1359.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"1359.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5, 0]</text>\n",
       "</g>\n",
       "<!-- 50&#45;&gt;51 -->\n",
       "<g id=\"edge51\" class=\"edge\">\n",
       "<title>50&#45;&gt;51</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1435.81,-816.88C1422.9,-805.23 1408.4,-792.14 1395.54,-780.53\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1397.54,-777.62 1387.77,-773.52 1392.85,-782.82 1397.54,-777.62\"/>\n",
       "</g>\n",
       "<!-- 52 -->\n",
       "<g id=\"node53\" class=\"node\">\n",
       "<title>52</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1523,-773.5 1426,-773.5 1426,-720.5 1523,-720.5 1523,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1474.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1474.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1474.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 50&#45;&gt;52 -->\n",
       "<g id=\"edge52\" class=\"edge\">\n",
       "<title>50&#45;&gt;52</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1473.15,-816.88C1473.36,-806.22 1473.59,-794.35 1473.8,-783.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1477.3,-783.59 1474,-773.52 1470.3,-783.45 1477.3,-783.59\"/>\n",
       "</g>\n",
       "<!-- 54 -->\n",
       "<g id=\"node55\" class=\"node\">\n",
       "<title>54</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1654,-781 1541,-781 1541,-713 1654,-713 1654,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[0] &lt;= 3.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.499</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 38</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [18, 20]</text>\n",
       "</g>\n",
       "<!-- 53&#45;&gt;54 -->\n",
       "<g id=\"edge54\" class=\"edge\">\n",
       "<title>53&#45;&gt;54</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1598.18,-816.88C1598.1,-808.78 1598.01,-799.98 1597.93,-791.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1601.42,-791.26 1597.83,-781.3 1594.42,-791.33 1601.42,-791.26\"/>\n",
       "</g>\n",
       "<!-- 77 -->\n",
       "<g id=\"node78\" class=\"node\">\n",
       "<title>77</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1777,-781 1672,-781 1672,-713 1777,-713 1777,-781\"/>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-765.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 105.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-750.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.278</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-735.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 18</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-720.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 15]</text>\n",
       "</g>\n",
       "<!-- 53&#45;&gt;77 -->\n",
       "<g id=\"edge77\" class=\"edge\">\n",
       "<title>53&#45;&gt;77</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1639.41,-816.88C1650.85,-807.62 1663.41,-797.45 1675.28,-787.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1677.8,-790.31 1683.37,-781.3 1673.39,-784.87 1677.8,-790.31\"/>\n",
       "</g>\n",
       "<!-- 55 -->\n",
       "<g id=\"node56\" class=\"node\">\n",
       "<title>55</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1417,-677 1312,-677 1312,-609 1417,-609 1417,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.302</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.401</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 18</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5, 13]</text>\n",
       "</g>\n",
       "<!-- 54&#45;&gt;55 -->\n",
       "<g id=\"edge55\" class=\"edge\">\n",
       "<title>54&#45;&gt;55</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1540.74,-717.3C1537.63,-715.82 1534.53,-714.38 1531.5,-713 1497.22,-697.37 1458.36,-681.23 1426.75,-668.48\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1427.78,-665.12 1417.19,-664.64 1425.17,-671.62 1427.78,-665.12\"/>\n",
       "</g>\n",
       "<!-- 64 -->\n",
       "<g id=\"node65\" class=\"node\">\n",
       "<title>64</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1650,-677 1545,-677 1545,-609 1650,-609 1650,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 133.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.455</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\n",
       "<text text-anchor=\"middle\" x=\"1597.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [13, 7]</text>\n",
       "</g>\n",
       "<!-- 54&#45;&gt;64 -->\n",
       "<g id=\"edge64\" class=\"edge\">\n",
       "<title>54&#45;&gt;64</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1597.5,-712.88C1597.5,-704.78 1597.5,-695.98 1597.5,-687.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1601,-687.3 1597.5,-677.3 1594,-687.3 1601,-687.3\"/>\n",
       "</g>\n",
       "<!-- 56 -->\n",
       "<g id=\"node57\" class=\"node\">\n",
       "<title>56</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1294,-573 1191,-573 1191,-505 1294,-505 1294,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"1242.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[5] &lt;= 0.249</text>\n",
       "<text text-anchor=\"middle\" x=\"1242.5\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.375</text>\n",
       "<text text-anchor=\"middle\" x=\"1242.5\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"1242.5\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 1]</text>\n",
       "</g>\n",
       "<!-- 55&#45;&gt;56 -->\n",
       "<g id=\"edge56\" class=\"edge\">\n",
       "<title>55&#45;&gt;56</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1324.89,-608.88C1313.81,-599.62 1301.65,-589.45 1290.16,-579.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1292.25,-577.03 1282.33,-573.3 1287.76,-582.4 1292.25,-577.03\"/>\n",
       "</g>\n",
       "<!-- 59 -->\n",
       "<g id=\"node60\" class=\"node\">\n",
       "<title>59</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1417,-573 1312,-573 1312,-505 1417,-505 1417,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 188.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.245</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1364.5\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 12]</text>\n",
       "</g>\n",
       "<!-- 55&#45;&gt;59 -->\n",
       "<g id=\"edge59\" class=\"edge\">\n",
       "<title>55&#45;&gt;59</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1364.5,-608.88C1364.5,-600.78 1364.5,-591.98 1364.5,-583.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1368,-583.3 1364.5,-573.3 1361,-583.3 1368,-583.3\"/>\n",
       "</g>\n",
       "<!-- 57 -->\n",
       "<g id=\"node58\" class=\"node\">\n",
       "<title>57</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1177,-461.5 1080,-461.5 1080,-408.5 1177,-408.5 1177,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1128.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1128.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1128.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 56&#45;&gt;57 -->\n",
       "<g id=\"edge57\" class=\"edge\">\n",
       "<title>56&#45;&gt;57</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1205.49,-504.88C1192.34,-493.12 1177.56,-479.89 1164.49,-468.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1166.81,-465.58 1157.02,-461.52 1162.14,-470.8 1166.81,-465.58\"/>\n",
       "</g>\n",
       "<!-- 58 -->\n",
       "<g id=\"node59\" class=\"node\">\n",
       "<title>58</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1292,-461.5 1195,-461.5 1195,-408.5 1292,-408.5 1292,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1243.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1243.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1243.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "</g>\n",
       "<!-- 56&#45;&gt;58 -->\n",
       "<g id=\"edge58\" class=\"edge\">\n",
       "<title>56&#45;&gt;58</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1242.82,-504.88C1242.93,-494.33 1243.04,-482.6 1243.15,-471.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1246.65,-471.55 1243.25,-461.52 1239.65,-471.49 1246.65,-471.55\"/>\n",
       "</g>\n",
       "<!-- 60 -->\n",
       "<g id=\"node61\" class=\"node\">\n",
       "<title>60</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1416,-461.5 1311,-461.5 1311,-408.5 1416,-408.5 1416,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1363.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1363.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10</text>\n",
       "<text text-anchor=\"middle\" x=\"1363.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 10]</text>\n",
       "</g>\n",
       "<!-- 59&#45;&gt;60 -->\n",
       "<g id=\"edge60\" class=\"edge\">\n",
       "<title>59&#45;&gt;60</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1364.18,-504.88C1364.07,-494.33 1363.96,-482.6 1363.85,-471.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1367.35,-471.49 1363.75,-461.52 1360.35,-471.55 1367.35,-471.49\"/>\n",
       "</g>\n",
       "<!-- 61 -->\n",
       "<g id=\"node62\" class=\"node\">\n",
       "<title>61</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1531,-469 1434,-469 1434,-401 1531,-401 1531,-469\"/>\n",
       "<text text-anchor=\"middle\" x=\"1482.5\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 72.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1482.5\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1482.5\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"1482.5\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 2]</text>\n",
       "</g>\n",
       "<!-- 59&#45;&gt;61 -->\n",
       "<g id=\"edge61\" class=\"edge\">\n",
       "<title>59&#45;&gt;61</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1402.81,-504.88C1413.53,-495.62 1425.29,-485.45 1436.4,-475.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1438.7,-478.49 1443.98,-469.3 1434.12,-473.19 1438.7,-478.49\"/>\n",
       "</g>\n",
       "<!-- 62 -->\n",
       "<g id=\"node63\" class=\"node\">\n",
       "<title>62</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1476,-357.5 1379,-357.5 1379,-304.5 1476,-304.5 1476,-357.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1427.5\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1427.5\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1427.5\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 61&#45;&gt;62 -->\n",
       "<g id=\"edge62\" class=\"edge\">\n",
       "<title>61&#45;&gt;62</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1464.64,-400.88C1458.71,-389.89 1452.1,-377.62 1446.11,-366.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1449.09,-364.66 1441.26,-357.52 1442.93,-367.98 1449.09,-364.66\"/>\n",
       "</g>\n",
       "<!-- 63 -->\n",
       "<g id=\"node64\" class=\"node\">\n",
       "<title>63</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1591,-357.5 1494,-357.5 1494,-304.5 1591,-304.5 1591,-357.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1542.5\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1542.5\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1542.5\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 61&#45;&gt;63 -->\n",
       "<g id=\"edge63\" class=\"edge\">\n",
       "<title>61&#45;&gt;63</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1501.98,-400.88C1508.51,-389.78 1515.81,-377.37 1522.39,-366.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1525.43,-367.91 1527.49,-357.52 1519.4,-364.36 1525.43,-367.91\"/>\n",
       "</g>\n",
       "<!-- 65 -->\n",
       "<g id=\"node66\" class=\"node\">\n",
       "<title>65</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1532,-565.5 1435,-565.5 1435,-512.5 1532,-512.5 1532,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1483.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1483.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"1483.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 0]</text>\n",
       "</g>\n",
       "<!-- 64&#45;&gt;65 -->\n",
       "<g id=\"edge65\" class=\"edge\">\n",
       "<title>64&#45;&gt;65</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1560.49,-608.88C1547.34,-597.12 1532.56,-583.89 1519.49,-572.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1521.81,-569.58 1512.02,-565.52 1517.14,-574.8 1521.81,-569.58\"/>\n",
       "</g>\n",
       "<!-- 66 -->\n",
       "<g id=\"node67\" class=\"node\">\n",
       "<title>66</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1653,-573 1550,-573 1550,-505 1653,-505 1653,-573\"/>\n",
       "<text text-anchor=\"middle\" x=\"1601.5\" y=\"-557.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 137.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1601.5\" y=\"-542.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.492</text>\n",
       "<text text-anchor=\"middle\" x=\"1601.5\" y=\"-527.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 16</text>\n",
       "<text text-anchor=\"middle\" x=\"1601.5\" y=\"-512.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 7]</text>\n",
       "</g>\n",
       "<!-- 64&#45;&gt;66 -->\n",
       "<g id=\"edge66\" class=\"edge\">\n",
       "<title>64&#45;&gt;66</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1598.8,-608.88C1599.12,-600.78 1599.46,-591.98 1599.8,-583.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1603.3,-583.43 1600.19,-573.3 1596.3,-583.15 1603.3,-583.43\"/>\n",
       "</g>\n",
       "<!-- 67 -->\n",
       "<g id=\"node68\" class=\"node\">\n",
       "<title>67</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1648,-461.5 1551,-461.5 1551,-408.5 1648,-408.5 1648,-461.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1599.5\" y=\"-446.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1599.5\" y=\"-431.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1599.5\" y=\"-416.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 66&#45;&gt;67 -->\n",
       "<g id=\"edge67\" class=\"edge\">\n",
       "<title>66&#45;&gt;67</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1600.85,-504.88C1600.64,-494.22 1600.41,-482.35 1600.2,-471.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1603.7,-471.45 1600,-461.52 1596.7,-471.59 1603.7,-471.45\"/>\n",
       "</g>\n",
       "<!-- 68 -->\n",
       "<g id=\"node69\" class=\"node\">\n",
       "<title>68</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1769,-469 1666,-469 1666,-401 1769,-401 1769,-469\"/>\n",
       "<text text-anchor=\"middle\" x=\"1717.5\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 150.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1717.5\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.459</text>\n",
       "<text text-anchor=\"middle\" x=\"1717.5\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1717.5\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 5]</text>\n",
       "</g>\n",
       "<!-- 66&#45;&gt;68 -->\n",
       "<g id=\"edge68\" class=\"edge\">\n",
       "<title>66&#45;&gt;68</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1639.16,-504.88C1649.6,-495.71 1661.04,-485.65 1671.87,-476.12\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1674.43,-478.53 1679.63,-469.3 1669.81,-473.27 1674.43,-478.53\"/>\n",
       "</g>\n",
       "<!-- 69 -->\n",
       "<g id=\"node70\" class=\"node\">\n",
       "<title>69</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1707,-357.5 1610,-357.5 1610,-304.5 1707,-304.5 1707,-357.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1658.5\" y=\"-342.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1658.5\" y=\"-327.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1658.5\" y=\"-312.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [6, 0]</text>\n",
       "</g>\n",
       "<!-- 68&#45;&gt;69 -->\n",
       "<g id=\"edge69\" class=\"edge\">\n",
       "<title>68&#45;&gt;69</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1698.34,-400.88C1691.92,-389.78 1684.74,-377.37 1678.27,-366.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1681.3,-364.42 1673.26,-357.52 1675.24,-367.93 1681.3,-364.42\"/>\n",
       "</g>\n",
       "<!-- 70 -->\n",
       "<g id=\"node71\" class=\"node\">\n",
       "<title>70</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1822,-365 1725,-365 1725,-297 1822,-297 1822,-365\"/>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 72.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.469</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 5]</text>\n",
       "</g>\n",
       "<!-- 68&#45;&gt;70 -->\n",
       "<g id=\"edge70\" class=\"edge\">\n",
       "<title>68&#45;&gt;70</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1735.68,-400.88C1740.38,-392.33 1745.49,-383.01 1750.4,-374.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1753.47,-375.75 1755.22,-365.3 1747.34,-372.38 1753.47,-375.75\"/>\n",
       "</g>\n",
       "<!-- 71 -->\n",
       "<g id=\"node72\" class=\"node\">\n",
       "<title>71</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1763,-253.5 1666,-253.5 1666,-200.5 1763,-200.5 1763,-253.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1714.5\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1714.5\" y=\"-223.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1714.5\" y=\"-208.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "</g>\n",
       "<!-- 70&#45;&gt;71 -->\n",
       "<g id=\"edge71\" class=\"edge\">\n",
       "<title>70&#45;&gt;71</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1754.34,-296.88C1747.92,-285.78 1740.74,-273.37 1734.27,-262.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1737.3,-260.42 1729.26,-253.52 1731.24,-263.93 1737.3,-260.42\"/>\n",
       "</g>\n",
       "<!-- 72 -->\n",
       "<g id=\"node73\" class=\"node\">\n",
       "<title>72</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1884,-261 1781,-261 1781,-193 1884,-193 1884,-261\"/>\n",
       "<text text-anchor=\"middle\" x=\"1832.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[3] &lt;= 251.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1832.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.48</text>\n",
       "<text text-anchor=\"middle\" x=\"1832.5\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"1832.5\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 2]</text>\n",
       "</g>\n",
       "<!-- 70&#45;&gt;72 -->\n",
       "<g id=\"edge72\" class=\"edge\">\n",
       "<title>70&#45;&gt;72</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1792.66,-296.88C1797.6,-288.33 1802.99,-279.01 1808.16,-270.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1811.26,-271.71 1813.24,-261.3 1805.2,-268.2 1811.26,-271.71\"/>\n",
       "</g>\n",
       "<!-- 73 -->\n",
       "<g id=\"node74\" class=\"node\">\n",
       "<title>73</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1825,-157 1722,-157 1722,-89 1825,-89 1825,-157\"/>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[1] &lt;= 152.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1773.5\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 2]</text>\n",
       "</g>\n",
       "<!-- 72&#45;&gt;73 -->\n",
       "<g id=\"edge73\" class=\"edge\">\n",
       "<title>72&#45;&gt;73</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1813.34,-192.88C1808.4,-184.33 1803.01,-175.01 1797.84,-166.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1800.8,-164.2 1792.76,-157.3 1794.74,-167.71 1800.8,-164.2\"/>\n",
       "</g>\n",
       "<!-- 76 -->\n",
       "<g id=\"node77\" class=\"node\">\n",
       "<title>76</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1940,-149.5 1843,-149.5 1843,-96.5 1940,-96.5 1940,-149.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1891.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1891.5\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1891.5\" y=\"-104.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 72&#45;&gt;76 -->\n",
       "<g id=\"edge76\" class=\"edge\">\n",
       "<title>72&#45;&gt;76</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1851.66,-192.88C1858.08,-181.78 1865.26,-169.37 1871.73,-158.18\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1874.76,-159.93 1876.74,-149.52 1868.7,-156.42 1874.76,-159.93\"/>\n",
       "</g>\n",
       "<!-- 74 -->\n",
       "<g id=\"node75\" class=\"node\">\n",
       "<title>74</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1765,-53 1668,-53 1668,0 1765,0 1765,-53\"/>\n",
       "<text text-anchor=\"middle\" x=\"1716.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1716.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1716.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "</g>\n",
       "<!-- 73&#45;&gt;74 -->\n",
       "<g id=\"edge74\" class=\"edge\">\n",
       "<title>73&#45;&gt;74</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1753.56,-88.95C1748.27,-80.17 1742.53,-70.66 1737.2,-61.82\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1740.19,-59.99 1732.02,-53.24 1734.19,-63.61 1740.19,-59.99\"/>\n",
       "</g>\n",
       "<!-- 75 -->\n",
       "<g id=\"node76\" class=\"node\">\n",
       "<title>75</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1880,-53 1783,-53 1783,0 1880,0 1880,-53\"/>\n",
       "<text text-anchor=\"middle\" x=\"1831.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1831.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1831.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 73&#45;&gt;75 -->\n",
       "<g id=\"edge75\" class=\"edge\">\n",
       "<title>73&#45;&gt;75</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1793.79,-88.95C1799.18,-80.17 1805.01,-70.66 1810.44,-61.82\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1813.46,-63.59 1815.7,-53.24 1807.49,-59.93 1813.46,-63.59\"/>\n",
       "</g>\n",
       "<!-- 78 -->\n",
       "<g id=\"node79\" class=\"node\">\n",
       "<title>78</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1773,-677 1676,-677 1676,-609 1773,-609 1773,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 44.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1724.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 1]</text>\n",
       "</g>\n",
       "<!-- 77&#45;&gt;78 -->\n",
       "<g id=\"edge78\" class=\"edge\">\n",
       "<title>77&#45;&gt;78</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1724.5,-712.88C1724.5,-704.78 1724.5,-695.98 1724.5,-687.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1728,-687.3 1724.5,-677.3 1721,-687.3 1728,-687.3\"/>\n",
       "</g>\n",
       "<!-- 81 -->\n",
       "<g id=\"node82\" class=\"node\">\n",
       "<title>81</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"2006,-677 1901,-677 1901,-609 2006,-609 2006,-677\"/>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-661.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 59.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-646.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.124</text>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-631.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15</text>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-616.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 14]</text>\n",
       "</g>\n",
       "<!-- 77&#45;&gt;81 -->\n",
       "<g id=\"edge81\" class=\"edge\">\n",
       "<title>77&#45;&gt;81</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1777.22,-717.03C1780.01,-715.64 1782.78,-714.29 1785.5,-713 1819.84,-696.72 1859.08,-680.47 1891,-667.84\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1892.64,-670.95 1900.66,-664.04 1890.07,-664.44 1892.64,-670.95\"/>\n",
       "</g>\n",
       "<!-- 79 -->\n",
       "<g id=\"node80\" class=\"node\">\n",
       "<title>79</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1768,-565.5 1671,-565.5 1671,-512.5 1768,-512.5 1768,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1719.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1719.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1719.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 78&#45;&gt;79 -->\n",
       "<g id=\"edge79\" class=\"edge\">\n",
       "<title>78&#45;&gt;79</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1722.88,-608.88C1722.35,-598.22 1721.77,-586.35 1721.24,-575.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1724.74,-575.34 1720.75,-565.52 1717.74,-575.68 1724.74,-575.34\"/>\n",
       "</g>\n",
       "<!-- 80 -->\n",
       "<g id=\"node81\" class=\"node\">\n",
       "<title>80</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1883,-565.5 1786,-565.5 1786,-512.5 1883,-512.5 1883,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1834.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1834.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1834.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "</g>\n",
       "<!-- 78&#45;&gt;80 -->\n",
       "<g id=\"edge80\" class=\"edge\">\n",
       "<title>78&#45;&gt;80</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1760.21,-608.88C1772.79,-597.23 1786.9,-584.14 1799.42,-572.53\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1802.03,-574.89 1806.98,-565.52 1797.27,-569.75 1802.03,-574.89\"/>\n",
       "</g>\n",
       "<!-- 82 -->\n",
       "<g id=\"node83\" class=\"node\">\n",
       "<title>82</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"2006,-565.5 1901,-565.5 1901,-512.5 2006,-512.5 2006,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"1953.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 14]</text>\n",
       "</g>\n",
       "<!-- 81&#45;&gt;82 -->\n",
       "<g id=\"edge82\" class=\"edge\">\n",
       "<title>81&#45;&gt;82</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1953.5,-608.88C1953.5,-598.33 1953.5,-586.6 1953.5,-575.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1957,-575.52 1953.5,-565.52 1950,-575.52 1957,-575.52\"/>\n",
       "</g>\n",
       "<!-- 83 -->\n",
       "<g id=\"node84\" class=\"node\">\n",
       "<title>83</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"2121,-565.5 2024,-565.5 2024,-512.5 2121,-512.5 2121,-565.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"2072.5\" y=\"-550.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"2072.5\" y=\"-535.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"2072.5\" y=\"-520.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 81&#45;&gt;83 -->\n",
       "<g id=\"edge83\" class=\"edge\">\n",
       "<title>81&#45;&gt;83</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1992.14,-608.88C2005.86,-597.12 2021.29,-583.89 2034.93,-572.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"2037.41,-574.69 2042.73,-565.52 2032.86,-569.37 2037.41,-574.69\"/>\n",
       "</g>\n",
       "<!-- 85 -->\n",
       "<g id=\"node86\" class=\"node\">\n",
       "<title>85</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1677,-981.5 1580,-981.5 1580,-928.5 1677,-928.5 1677,-981.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-966.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-951.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1628.5\" y=\"-936.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 84&#45;&gt;85 -->\n",
       "<g id=\"edge85\" class=\"edge\">\n",
       "<title>84&#45;&gt;85</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1628.5,-1024.88C1628.5,-1014.33 1628.5,-1002.6 1628.5,-991.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1632,-991.52 1628.5,-981.52 1625,-991.52 1632,-991.52\"/>\n",
       "</g>\n",
       "<!-- 86 -->\n",
       "<g id=\"node87\" class=\"node\">\n",
       "<title>86</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1896,-989 1791,-989 1791,-921 1896,-921 1896,-989\"/>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-973.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[2] &lt;= 54.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-958.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.069</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-943.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 28</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-928.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 27]</text>\n",
       "</g>\n",
       "<!-- 84&#45;&gt;86 -->\n",
       "<g id=\"edge86\" class=\"edge\">\n",
       "<title>84&#45;&gt;86</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1681.09,-1033.05C1711.42,-1018.66 1749.71,-1000.5 1781.49,-985.42\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1783.17,-988.5 1790.7,-981.05 1780.17,-982.17 1783.17,-988.5\"/>\n",
       "</g>\n",
       "<!-- 87 -->\n",
       "<g id=\"node88\" class=\"node\">\n",
       "<title>87</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1892,-885 1795,-885 1795,-817 1892,-817 1892,-885\"/>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-869.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">X[6] &lt;= 23.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-854.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-839.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-824.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "</g>\n",
       "<!-- 86&#45;&gt;87 -->\n",
       "<g id=\"edge87\" class=\"edge\">\n",
       "<title>86&#45;&gt;87</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1843.5,-920.88C1843.5,-912.78 1843.5,-903.98 1843.5,-895.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1847,-895.3 1843.5,-885.3 1840,-895.3 1847,-895.3\"/>\n",
       "</g>\n",
       "<!-- 90 -->\n",
       "<g id=\"node91\" class=\"node\">\n",
       "<title>90</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"2015,-877.5 1910,-877.5 1910,-824.5 2015,-824.5 2015,-877.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1962.5\" y=\"-862.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1962.5\" y=\"-847.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 26</text>\n",
       "<text text-anchor=\"middle\" x=\"1962.5\" y=\"-832.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 26]</text>\n",
       "</g>\n",
       "<!-- 86&#45;&gt;90 -->\n",
       "<g id=\"edge90\" class=\"edge\">\n",
       "<title>86&#45;&gt;90</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1882.14,-920.88C1895.86,-909.12 1911.29,-895.89 1924.93,-884.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1927.41,-886.69 1932.73,-877.52 1922.86,-881.37 1927.41,-886.69\"/>\n",
       "</g>\n",
       "<!-- 88 -->\n",
       "<g id=\"node89\" class=\"node\">\n",
       "<title>88</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"1892,-773.5 1795,-773.5 1795,-720.5 1892,-720.5 1892,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1843.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "</g>\n",
       "<!-- 87&#45;&gt;88 -->\n",
       "<g id=\"edge88\" class=\"edge\">\n",
       "<title>87&#45;&gt;88</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1843.5,-816.88C1843.5,-806.33 1843.5,-794.6 1843.5,-783.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1847,-783.52 1843.5,-773.52 1840,-783.52 1847,-783.52\"/>\n",
       "</g>\n",
       "<!-- 89 -->\n",
       "<g id=\"node90\" class=\"node\">\n",
       "<title>89</title>\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"2007,-773.5 1910,-773.5 1910,-720.5 2007,-720.5 2007,-773.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1958.5\" y=\"-758.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1958.5\" y=\"-743.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1958.5\" y=\"-728.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "</g>\n",
       "<!-- 87&#45;&gt;89 -->\n",
       "<g id=\"edge89\" class=\"edge\">\n",
       "<title>87&#45;&gt;89</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1880.84,-816.88C1894.1,-805.12 1909.01,-791.89 1922.19,-780.2\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1924.57,-782.77 1929.73,-773.52 1919.92,-777.54 1924.57,-782.77\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x26d8c60df10>"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2 = sklearn.tree.DecisionTreeClassifier()\n",
    "\n",
    "clf2.fit(train_data_remove, outcome_train)\n",
    "\n",
    "dot_data = tree.export_graphviz(clf2, out_file=None)\n",
    "graph = graphviz.Source(dot_data)\n",
    "graph.render(\"Diabetes\")\n",
    "\n",
    "graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "_uuid": "113114bcb16ca889eadcd9a19332b3dfdd04c971"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C4.5 Testing accuracy:  0.7288135593220338\n"
     ]
    }
   ],
   "source": [
    "test_array2 = clf2.predict(test_data_remove).tolist()\n",
    "CTestAccuracy = sklearn.metrics.accuracy_score(outcome_test, test_array2)\n",
    "\n",
    "print('C4.5 Testing accuracy: ',CTestAccuracy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "_uuid": "82c5ca7cda5a854e8b0f596e7ab0a76371adff5a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C4.5 Training accuracy:  1.0\n"
     ]
    }
   ],
   "source": [
    "train_array2 = clf2.predict(train_data_remove).tolist()\n",
    "\n",
    "CTrainAccuracy = sklearn.metrics.accuracy_score(outcome_train, train_array2)\n",
    "\n",
    "print('C4.5 Training accuracy: ', CTrainAccuracy)\n",
    "\n",
    "saveResult('C4.5', CTestAccuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "_uuid": "b10e51c291e6e584255ab9c936523414049f1a86"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TESTING DATA\n",
      "Confusion Matrix with Testing Data with ID3 Algorithm:\n",
      "[[62 10]\n",
      " [20 26]]\n",
      "\n",
      "Classification Report ID3 Algorithm:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.86      0.81        72\n",
      "           1       0.72      0.57      0.63        46\n",
      "\n",
      "    accuracy                           0.75       118\n",
      "   macro avg       0.74      0.71      0.72       118\n",
      "weighted avg       0.74      0.75      0.74       118\n",
      "\n",
      "\n",
      "\n",
      "TRAINING DATA\n",
      "Confusion Matrix with Training Data with ID3 Algorithm:\n",
      "[[190   0]\n",
      " [  0  84]]\n",
      "\n",
      "Classification Report ID3 Algorithm:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00       190\n",
      "           1       1.00      1.00      1.00        84\n",
      "\n",
      "    accuracy                           1.00       274\n",
      "   macro avg       1.00      1.00      1.00       274\n",
      "weighted avg       1.00      1.00      1.00       274\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prediction_test = clf.predict(test_data_remove).tolist()\n",
    "print(\"TESTING DATA\")\n",
    "print('Confusion Matrix with Testing Data with ID3 Algorithm:')\n",
    "print(confusion_matrix(outcome_test, prediction_test))\n",
    "print()\n",
    "print('Classification Report ID3 Algorithm:')\n",
    "print(classification_report(outcome_test, prediction_test))\n",
    "print()\n",
    "print()\n",
    "print(\"TRAINING DATA\")\n",
    "prediction_train = clf.predict(train_data_remove).tolist()\n",
    "\n",
    "print('Confusion Matrix with Training Data with ID3 Algorithm:')\n",
    "print(confusion_matrix(outcome_train, prediction_train))\n",
    "print()\n",
    "print('Classification Report ID3 Algorithm:')\n",
    "print(classification_report(outcome_train, prediction_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "_uuid": "e917fee58e19b255f29e2eadc7ec8e83d24c276b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TESTING DATA\n",
      "Confusion Matrix with Testing Data with C4.5 Algorithm:\n",
      "[[59 13]\n",
      " [19 27]]\n",
      "\n",
      "Classification Report C4.5 Algorithm:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.82      0.79        72\n",
      "           1       0.68      0.59      0.63        46\n",
      "\n",
      "    accuracy                           0.73       118\n",
      "   macro avg       0.72      0.70      0.71       118\n",
      "weighted avg       0.72      0.73      0.72       118\n",
      "\n",
      "\n",
      "\n",
      "TRAINING DATA\n",
      "Confusion Matrix with Training Data with C4.5 Algorithm:\n",
      "[[190   0]\n",
      " [  0  84]]\n",
      "\n",
      "Classification Report C4.5 Algorithm:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00       190\n",
      "           1       1.00      1.00      1.00        84\n",
      "\n",
      "    accuracy                           1.00       274\n",
      "   macro avg       1.00      1.00      1.00       274\n",
      "weighted avg       1.00      1.00      1.00       274\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prediction_train2 = clf2.predict(train_data_remove).tolist()\n",
    "\n",
    "prediction_test2 = clf2.predict(test_data_remove).tolist()\n",
    "print(\"TESTING DATA\")\n",
    "print('Confusion Matrix with Testing Data with C4.5 Algorithm:')\n",
    "print(confusion_matrix(outcome_test, prediction_test2))\n",
    "print()\n",
    "print('Classification Report C4.5 Algorithm:')\n",
    "print(classification_report(outcome_test, prediction_test2))\n",
    "print()\n",
    "print()\n",
    "print(\"TRAINING DATA\")\n",
    "print('Confusion Matrix with Training Data with C4.5 Algorithm:')\n",
    "print(confusion_matrix(outcome_train, prediction_train2))\n",
    "print()\n",
    "print('Classification Report C4.5 Algorithm:')\n",
    "print(classification_report(outcome_train, prediction_train2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a class=\"anchor\" id=\"0\"></a>\n",
    "# **K-Means Clustering**\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **1. Import libraries** <a class=\"anchor\" id=\"6\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load in \n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt # for data visualization\n",
    "import seaborn as sns # for statistical data visualization\n",
    "%matplotlib inline\n",
    "\n",
    "# Input data files are available in the \"../input/\" directory.\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# Any results you write to the current directory are saved as output."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ignore warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **2. Import dataset** <a class=\"anchor\" id=\"7\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = 'diabetes.csv'\n",
    "\n",
    "df = pd.read_csv(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **3. Exploratory data analysis** <a class=\"anchor\" id=\"8\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check shape of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(768, 9)"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "We can see that there are 768 instances and 9 attributes in the dataset. \n",
    "\n",
    "So, we can infer that the first instance is the row header and there are 4 extra attributes in the dataset. Next, we should take a look at the dataset to gain more insight about it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore `Outcome` variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0], dtype=int64)"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view the labels in the variable\n",
    "\n",
    "df['Outcome'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view how many different types of variables are there\n",
    "\n",
    "len(df['Outcome'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "### 9. Declare feature vector and target variable\n",
    "X = df\n",
    "\n",
    "y = df['Outcome']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **4. Feature Scaling** <a class=\"anchor\" id=\"11\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df\n",
    "cols = X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "ms = MinMaxScaler()\n",
    "\n",
    "X = ms.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.DataFrame(X, columns=[cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.743719</td>\n",
       "      <td>0.590164</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500745</td>\n",
       "      <td>0.234415</td>\n",
       "      <td>0.483333</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.427136</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.292929</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.396423</td>\n",
       "      <td>0.116567</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.470588</td>\n",
       "      <td>0.919598</td>\n",
       "      <td>0.524590</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.347243</td>\n",
       "      <td>0.253629</td>\n",
       "      <td>0.183333</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.447236</td>\n",
       "      <td>0.540984</td>\n",
       "      <td>0.232323</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.418778</td>\n",
       "      <td>0.038002</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.688442</td>\n",
       "      <td>0.327869</td>\n",
       "      <td>0.353535</td>\n",
       "      <td>0.198582</td>\n",
       "      <td>0.642325</td>\n",
       "      <td>0.943638</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Pregnancies   Glucose BloodPressure SkinThickness   Insulin       BMI  \\\n",
       "0    0.352941  0.743719      0.590164      0.353535  0.000000  0.500745   \n",
       "1    0.058824  0.427136      0.540984      0.292929  0.000000  0.396423   \n",
       "2    0.470588  0.919598      0.524590      0.000000  0.000000  0.347243   \n",
       "3    0.058824  0.447236      0.540984      0.232323  0.111111  0.418778   \n",
       "4    0.000000  0.688442      0.327869      0.353535  0.198582  0.642325   \n",
       "\n",
       "  DiabetesPedigreeFunction       Age Outcome  \n",
       "0                 0.234415  0.483333     1.0  \n",
       "1                 0.116567  0.166667     0.0  \n",
       "2                 0.253629  0.183333     1.0  \n",
       "3                 0.038002  0.000000     0.0  \n",
       "4                 0.943638  0.200000     1.0  "
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **5. K-Means model with two clusters** <a class=\"anchor\" id=\"12\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(n_clusters=2, random_state=0)"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "kmeans = KMeans(n_clusters=2, random_state=0) \n",
    "\n",
    "kmeans.fit(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **6. K-Means model parameters study** <a class=\"anchor\" id=\"13\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.86215979e-01,  7.09836496e-01,  5.80529728e-01,\n",
       "         2.23880597e-01,  1.18600261e-01,  5.23733790e-01,\n",
       "         2.01750640e-01,  2.67786070e-01,  1.00000000e+00],\n",
       "       [ 1.94000000e-01,  5.52663317e-01,  5.58885246e-01,\n",
       "         1.98626263e-01,  8.13144208e-02,  4.51627422e-01,\n",
       "         1.50185312e-01,  1.69833333e-01, -8.32667268e-16]])"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans.cluster_centers_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The KMeans algorithm clusters data by trying to separate samples in n groups of equal variances, minimizing a criterion known as **inertia**, or within-cluster sum-of-squares Inertia, or the within-cluster sum of squares criterion, can be recognized as a measure of how internally coherent clusters are.\n",
    "\n",
    "\n",
    "- The k-means algorithm divides a set of N samples X into K disjoint clusters C, each described by the mean j of the samples in the cluster. The means are commonly called the cluster **centroids**.\n",
    "\n",
    "\n",
    "- The K-means algorithm aims to choose centroids that minimize the inertia, or within-cluster sum of squared criterion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inertia\n",
    "\n",
    "\n",
    "- **Inertia** is not a normalized metric. \n",
    "\n",
    "- The lower values of inertia are better and zero is optimal. \n",
    "\n",
    "- But in very high-dimensional spaces, euclidean distances tend to become inflated (this is an instance of `curse of dimensionality`). \n",
    "\n",
    "- Running a dimensionality reduction algorithm such as PCA prior to k-means clustering can alleviate this problem and speed up the computations.\n",
    "\n",
    "- We can calculate model inertia as follows:-"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "149.51776645811188"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans.inertia_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The lesser the model inertia, the better the model fit.\n",
    "\n",
    "- We can see that the model has very high inertia. So, this is not a good model fit to the data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " # **7. Check quality of weak classification by the model** <a class=\"anchor\" id=\"14\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 0 out of 768 samples were correctly labeled.\n"
     ]
    }
   ],
   "source": [
    "labels = kmeans.labels_\n",
    "\n",
    "# check how many of the samples were correctly labeled\n",
    "correct_labels = sum(y == labels)\n",
    "\n",
    "print(\"Result: %d out of %d samples were correctly labeled.\" % (correct_labels, y.size))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score: 0.00\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy score: {0:0.2f}'. format(correct_labels/float(y.size)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **8. Use elbow method to find optimal number of clusters** <a class=\"anchor\" id=\"15\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "cs = []\n",
    "for i in range(1, 30):\n",
    "    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n",
    "    kmeans.fit(X)\n",
    "    cs.append(kmeans.inertia_)\n",
    "plt.plot(range(1, 30), cs)\n",
    "plt.title('The Elbow Method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('CS')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By the above plot, we can see that there is a kink at k=2.\n",
    "\n",
    "Hence k=2 can be considered a good number of the cluster to cluster this data.\n",
    "\n",
    "But, we have seen that I have achieved a weak classification accuracy of 1% with k=2.\n",
    "\n",
    "I will write the required code with k=2 again for convinience.\n",
    "\n",
    "we will check the model accuracy with different number of clusters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **9. K-Means model with different clusters** <a class=\"anchor\" id=\"16\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-Means model with 3 clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 128 out of 768 samples were correctly labeled.\n",
      "Accuracy score: 0.17\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans = KMeans(n_clusters=3, random_state=0)\n",
    "\n",
    "kmeans.fit(X)\n",
    "\n",
    "# check how many of the samples were correctly labeled\n",
    "labels = kmeans.labels_\n",
    "\n",
    "correct_labels = sum(y == labels)\n",
    "print(\"Result: %d out of %d samples were correctly labeled.\" % (correct_labels, y.size))\n",
    "print('Accuracy score: {0:0.2f}'. format(correct_labels/float(y.size)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-Means model with 11 clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 162 out of 768 samples were correctly labeled.\n",
      "Accuracy score: 0.21\n"
     ]
    }
   ],
   "source": [
    "kmeans = KMeans(n_clusters=11, random_state=0)\n",
    "\n",
    "kmeans.fit(X)\n",
    "\n",
    "# check how many of the samples were correctly labeled\n",
    "labels = kmeans.labels_\n",
    "\n",
    "correct_labels = sum(y == labels)\n",
    "print(\"Result: %d out of %d samples were correctly labeled.\" % (correct_labels, y.size))\n",
    "print('Accuracy score: {0:0.2f}'. format(correct_labels/float(y.size)))\n",
    "\n",
    "saveResult('K-Means', correct_labels/float(y.size))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have achieved a relatively Low accuracy of 21% with k=11."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **10. Results and conclusion** <a class=\"anchor\" id=\"17\"></a>\n",
    "\n",
    "[Table of Contents](#0.1)\n",
    "\n",
    "\n",
    "1.\tIn this project, We have implemented the most popular unsupervised clustering technique called **K-Means Clustering**.\n",
    "\n",
    "2.\tWe have applied the elbow method and find that k=11 (k is number of clusters) can be considered a good number of cluster to cluster this data.\n",
    "\n",
    "3.\tWe have find that the model has very high inertia of 149.517 So, this is not a good model fit to the data.\n",
    "\n",
    "4.\tSo, We have changed the value of k and find relatively higher classification accuracy of 21% with k=11.\n",
    "\n",
    "5.\tHence, we can conclude that k=11 being the optimal number of clusters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Models</th>\n",
       "      <th>Test_accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KNN</td>\n",
       "      <td>0.772184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ID3</td>\n",
       "      <td>0.745763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C4.5</td>\n",
       "      <td>0.728814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.248568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>K-Means</td>\n",
       "      <td>0.210938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Models  Test_accuracy\n",
       "0                KNN       0.772184\n",
       "2                ID3       0.745763\n",
       "3               C4.5       0.728814\n",
       "1  Linear Regression       0.248568\n",
       "4            K-Means       0.210938"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = pd.DataFrame({'Models':models, 'Test_accuracy':test})\n",
    "result.sort_values(by=['Test_accuracy'],ascending=False,inplace=True)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
